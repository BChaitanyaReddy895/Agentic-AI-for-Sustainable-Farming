import streamlit as st
import sys
import os
import sqlite3
import pandas as pd
from datetime import datetime
from agents.init_db import initialize_db
import plotly.graph_objects as go
from PIL import Image
import numpy as np
import re
import base64
import io

# --- Multilingual Support ---
LANGUAGES = {
    'English': {
        'title': "Sustainable Farming Recommendation System",
        'farm_details': "ЁЯУП Farm Details",
        'crop_preference': "ЁЯМ▒ Crop Preference",
        'soil_analysis': "ЁЯЧ║я╕П Soil Analysis",
        'upload_photo': "ЁЯУ╕ Upload a photo",
        'manual_selection': "ЁЯУЭ Manual selection",
        'select_soil_type': "Select soil type",
        'generate_recommendation': "ЁЯТб Generate Smart Recommendation",
        'personalized_recommendation': "### ЁЯОп Your Personalized Recommendation",
        'weather_forecast': "#### ЁЯМдя╕П Weather Forecast (AI Model)",
        'pest_prediction': "#### ЁЯРЫ Pest/Disease Prediction (AI Model)",
        'details': "Details:",
        'crop_rotation_planner': "ЁЯМ▒ Crop Rotation Planner",
        'fertilizer_optimization': "ЁЯзк Fertilizer Optimization Calculator",
        'previous_recommendations': "ЁЯУЬ Previous Recommendations",
        'built_with': "Built with тЭдя╕П for sustainable farming",
        'last_updated': "Last updated: ",
        'signup_title': "ЁЯМ╛ Join the Farming Community",
        'login_title': "ЁЯМ╛ Welcome Back",
        'username': "ЁЯСд Farmer Name",
        'farm_name': "ЁЯПб Farm Name",
        'profile_picture': "ЁЯУ╖ Profile Picture (Optional)",
        'signup_button': "тЬЕ Join Now",
        'login_button': "тЬЕ Login",
        'signup_instruction': "Fill in your details to get started!",
        'login_instruction': "Select your farmer profile to continue.",
        'no_account': "No account yet? Sign up!",
        'signup_success': "Welcome, {username}! Your account is created.",
        'login_success': "Welcome back, {username}!",
        'username_exists': "тЪая╕П Farmer name already taken. Try another.",
        'no_users': "No farmers registered yet. Sign up to start!"
    },
    'Telugu': {
        'title': "р░╕р░╕р▒Нр░Яр▒Ир░ир░мр▒Бр░▓р▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Вр░Ър░и р░╡р▒Нр░пр░╡р░╕р▒Нр░е",
        'farm_details': "ЁЯУП р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░┐р░╡р░░р░╛р░▓р▒Б",
        'crop_preference': "ЁЯМ▒ р░кр░Вр░Я р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д",
        'soil_analysis': "ЁЯЧ║я╕П р░ир▒Зр░▓ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        'upload_photo': "ЁЯУ╕ р░лр▒Лр░Яр▒Лр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        'manual_selection': "ЁЯУЭ р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Н р░Ор░Вр░кр░┐р░Х",
        'select_soil_type': "р░ир▒Зр░▓ р░░р░Хр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        'generate_recommendation': "ЁЯТб р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╕р▒Вр░Ър░ир░ир▒Б р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
        'personalized_recommendation': "### ЁЯОп р░ор▒А р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р▒Вр░Ър░и",
        'weather_forecast': "#### ЁЯМдя╕П р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и (AI р░ор▒Лр░бр░▓р▒Н)",
        'pest_prediction': "#### ЁЯРЫ р░др▒Жр░Чр▒Бр░▓р▒Б/р░кр▒Бр░░р▒Бр░Чр▒Б р░╕р▒Вр░Ър░и (AI р░ор▒Лр░бр░▓р▒Н)",
        'details': "р░╡р░┐р░╡р░░р░╛р░▓р▒Б:",
        'crop_rotation_planner': "ЁЯМ▒ р░кр░Вр░Я р░ор░╛р░░р▒Нр░кр░┐р░бр░┐ р░кр▒Нр░░р░гр░╛р░│р░┐р░Х",
        'fertilizer_optimization': "ЁЯзк р░Ор░░р▒Бр░╡р▒Б р░Жр░кр▒Нр░Яр░┐р░ор▒Ир░Ьр▒Зр░╖р░ир▒Н р░Хр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр░░р▒Н",
        'previous_recommendations': "ЁЯУЬ р░Чр░д р░╕р▒Вр░Ър░ир░▓р▒Б",
        'built_with': "р░╕р░╕р▒Нр░Яр▒Ир░ир░мр▒Бр░▓р▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Хр▒Лр░╕р░В р░кр▒Нр░░р▒Зр░ор░др▒Л р░ир░┐р░░р▒Нр░ор░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐",
        'last_updated': "р░Ър░┐р░╡р░░р░┐р░Чр░╛ р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐: ",
        'signup_title': "ЁЯМ╛ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░ор░╛р░Ьр░Вр░▓р▒Л р░Ър▒Зр░░р░Вр░бр░┐",
        'login_title': "ЁЯМ╛ р░др░┐р░░р░┐р░Чр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В",
        'username': "ЁЯСд р░░р▒Ир░др▒Б р░кр▒Зр░░р▒Б",
        'farm_name': "ЁЯПб р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░кр▒Зр░░р▒Б",
        'profile_picture': "ЁЯУ╖ р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░Ър░┐р░др▒Нр░░р░В (р░Рр░Ър▒Нр░Ыр░┐р░Хр░В)",
        'signup_button': "тЬЕ р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░Ър▒Зр░░р░Вр░бр░┐",
        'login_button': "тЬЕ р░▓р░╛р░Чр░┐р░ир▒Н",
        'signup_instruction': "р░ор▒А р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐!",
        'login_instruction': "р░ор▒А р░░р▒Ир░др▒Б р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒НтАМр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
        'no_account': "р░Зр░Вр░Хр░╛ р░Цр░╛р░др░╛ р░▓р▒Зр░жр░╛? р░╕р▒Ир░ир▒Н р░Ер░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!",
        'signup_success': "р░╕р▒Нр░╡р░╛р░Чр░др░В, {username}! р░ор▒А р░Цр░╛р░др░╛ р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐.",
        'login_success': "р░др░┐р░░р░┐р░Чр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В, {username}!",
        'username_exists': "тЪая╕П р░░р▒Ир░др▒Б р░кр▒Зр░░р▒Б р░Зр░кр▒Нр░кр░Яр░┐р░Хр▒З р░др▒Ар░╕р▒Бр░Хр▒Лр░мр░бр░┐р░Вр░жр░┐. р░╡р▒Зр░░р▒Кр░Хр░Яр░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        'no_users': "р░Зр░Вр░Хр░╛ р░░р▒Ир░др▒Бр░▓р▒Б р░ир░ор▒Лр░жр▒Б р░Хр░╛р░▓р▒Зр░жр▒Б. р░╕р▒Ир░ир▒Н р░Ер░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!"
    },
    'Kannada': {
        'title': "р▓╕р│Нр▓ер▓┐р▓░ р▓Хр│Гр▓╖р▓┐ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж",
        'farm_details': "ЁЯУП р▓Хр│Гр▓╖р▓┐ р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Б",
        'crop_preference': "ЁЯМ▒ р▓мр│Жр▓│р│Ж р▓Жр▓жр│Нр▓пр▓др│Ж",
        'soil_analysis': "ЁЯЧ║я╕П р▓ор▓гр│Нр▓гр│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж",
        'upload_photo': "ЁЯУ╕ р▓лр│Лр▓Яр│Л р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐",
        'manual_selection': "ЁЯУЭ р▓Хр│Ир▓пр▓╛р▓░р│Ж р▓Жр▓пр│Нр▓Хр│Ж",
        'select_soil_type': "р▓ор▓гр│Нр▓гр▓┐р▓и р▓кр│Нр▓░р▓Хр▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
        'generate_recommendation': "ЁЯТб р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓░р▓Ър▓┐р▓╕р▓┐",
        'personalized_recommendation': "### ЁЯОп р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б",
        'weather_forecast': "#### ЁЯМдя╕П р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж (AI р▓ор▓╛р▓жр▓░р▓┐)",
        'pest_prediction': "#### ЁЯРЫ р▓Хр│Ар▓Я/р▓░р│Лр▓Ч р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж (AI р▓ор▓╛р▓жр▓░р▓┐)",
        'details': "р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Б:",
        'crop_rotation_planner': "ЁЯМ▒ р▓мр│Жр▓│р│Ж р▓кр▓░р▓┐р▓╡р▓░р│Нр▓др▓ир│Ж р▓пр│Лр▓Ьр▓ир│Ж",
        'fertilizer_optimization': "ЁЯзк р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░ р▓Жр▓кр│Нр▓Яр▓┐р▓ор│Ир▓╕р│Зр▓╢р▓ир│Н р▓Хр│Нр▓пр▓╛р▓▓р│Нр▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н",
        'previous_recommendations': "ЁЯУЬ р▓╣р▓┐р▓Вр▓жр▓┐р▓и р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
        'built_with': "р▓╕р│Нр▓ер▓┐р▓░ р▓Хр│Гр▓╖р▓┐р▓Чр▓╛р▓Чр▓┐ р▓кр│Нр▓░р│Ар▓др▓┐р▓пр▓┐р▓Вр▓ж р▓ир▓┐р▓░р│Нр▓ор▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж",
        'last_updated': "р▓Хр│Кр▓ир│Жр▓пр▓жр▓╛р▓Чр▓┐ р▓ир▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж: ",
        'signup_title': "ЁЯМ╛ р▓Хр│Гр▓╖р▓┐ р▓╕р▓ор│Бр▓жр▓╛р▓пр▓Хр│Нр▓Хр│Ж р▓╕р│Зр▓░р▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐",
        'login_title': "ЁЯМ╛ р▓ор▓др│Нр▓др│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д",
        'username': "ЁЯСд р▓░р│Ир▓др▓и р▓╣р│Жр▓╕р▓░р│Б",
        'farm_name': "ЁЯПб р▓Хр│Гр▓╖р▓┐ р▓╣р│Жр▓╕р▓░р│Б",
        'profile_picture': "ЁЯУ╖ р▓кр│Нр▓░р│Кр▓лр│Ир▓▓р│Н р▓Ър▓┐р▓др│Нр▓░ (р▓Рр▓Ър│Нр▓Ыр▓┐р▓Х)",
        'signup_button': "тЬЕ р▓Ир▓Ч р▓╕р│Зр▓░р▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐",
        'login_button': "тЬЕ р▓▓р▓╛р▓Чр▓┐р▓ир│Н",
        'signup_instruction': "р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓▓р│Б р▓ир▓┐р▓ор│Нр▓о р▓╡р▓┐р▓╡р▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓нр▓░р│Нр▓др▓┐ р▓ор▓╛р▓бр▓┐!",
        'login_instruction': "р▓ор│Бр▓Вр▓жр│Бр▓╡р▓░р▓┐р▓пр▓▓р│Б р▓ир▓┐р▓ор│Нр▓о р▓░р│Ир▓д р▓кр│Нр▓░р│Кр▓лр│Ир▓▓р│Н р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.",
        'no_account': "р▓Зр▓ир│Нр▓ир│В р▓Цр▓╛р▓др│Ж р▓Зр▓▓р│Нр▓▓р▓╡р│З? р▓╕р│Ир▓ир│Н р▓Ер▓кр│Н р▓ор▓╛р▓бр▓┐!",
        'signup_success': "р▓╕р│Нр▓╡р▓╛р▓Чр▓д, {username}! р▓ир▓┐р▓ор│Нр▓о р▓Цр▓╛р▓др│Ж р▓░р▓Ър▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж.",
        'login_success': "р▓ор▓др│Нр▓др│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д, {username}!",
        'username_exists': "тЪая╕П р▓░р│Ир▓др▓и р▓╣р│Жр▓╕р▓░р│Б р▓Ир▓Чр▓╛р▓Чр▓▓р│З р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓▓р▓╛р▓Чр▓┐р▓жр│Ж. р▓мр│Зр▓░р│Жр▓пр│Кр▓Вр▓жр▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
        'no_users': "р▓Зр▓ир│Нр▓ир│В р▓░р│Ир▓др▓░р│Б р▓ир│Лр▓Вр▓жр▓╛р▓пр▓┐р▓╕р▓┐р▓▓р│Нр▓▓. р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓▓р│Б р▓╕р│Ир▓ир│Н р▓Ер▓кр│Н р▓ор▓╛р▓бр▓┐!"
    },
    'Hindi': {
        'title': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА",
        'farm_details': "ЁЯУП рдХреГрд╖рд┐ рд╡рд┐рд╡рд░рдг",
        'crop_preference': "ЁЯМ▒ рдлрд╕рд▓ рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
        'soil_analysis': "ЁЯЧ║я╕П рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        'manual_selection': "ЁЯУЭ рдореИрдиреНрдпреБрдЕрд▓ рдЪрдпрди",
        'select_soil_type': "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдЙрддреНрдкрдиреНрди рдХрд░реЗрдВ",
        'personalized_recommendation': "### ЁЯОп рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢",
        'weather_forecast': "#### ЁЯМдя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (AI рдореЙрдбрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯ/рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (AI рдореЙрдбрд▓)",
        'details': "рд╡рд┐рд╡рд░рдг:",
        'crop_rotation_planner': "ЁЯМ▒ рдлрд╕рд▓ рдЪрдХреНрд░ рдпреЛрдЬрдирд╛",
        'fertilizer_optimization': "ЁЯзк рдЙрд░реНрд╡рд░рдХ рдЕрдиреБрдХреВрд▓рди рдХреИрд▓рдХреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдкрд┐рдЫрд▓реА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        'built_with': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛",
        'last_updated': "рдЕрдВрддрд┐рдо рдмрд╛рд░ рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛: ",
        'signup_title': "ЁЯМ╛ рдХреГрд╖рдХ рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ",
        'login_title': "ЁЯМ╛ рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
        'username': "ЁЯСд рдХрд┐рд╕рд╛рди рдХрд╛ рдирд╛рдо",
        'farm_name': "ЁЯПб рдЦреЗрдд рдХрд╛ рдирд╛рдо",
        'profile_picture': "ЁЯУ╖ рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЪрд┐рддреНрд░ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
        'signup_button': "тЬЕ рдЕрдм рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ",
        'login_button': "тЬЕ рд▓реЙрдЧрд┐рди",
        'signup_instruction': "рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рднрд░реЗрдВ!",
        'login_instruction': "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдХрд┐рд╕рд╛рди рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЪреБрдиреЗрдВред",
        'no_account': "рдЕрднреА рддрдХ рдХреЛрдИ рдЦрд╛рддрд╛ рдирд╣реАрдВ рд╣реИ? рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ!",
        'signup_success': "рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {username}! рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рдмрди рдЧрдпрд╛ рд╣реИред",
        'login_success': "рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {username}!",
        'username_exists': "тЪая╕П рдХрд┐рд╕рд╛рди рдХрд╛ рдирд╛рдо рдкрд╣рд▓реЗ рд╕реЗ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рджреВрд╕рд░рд╛ рдирд╛рдо рдЖрдЬрд╝рдорд╛рдПрдВред",
        'no_users': "рдЕрднреА рддрдХ рдХреЛрдИ рдХрд┐рд╕рд╛рди рдкрдВрдЬреАрдХреГрдд рдирд╣реАрдВ рд╣реИред рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ!"
    },
    'French': {
        'title': "Syst├иme de recommandation agricole durable",
        'farm_details': "ЁЯУП D├йtails de la ferme",
        'crop_preference': "ЁЯМ▒ Pr├йf├йrence de culture",
        'soil_analysis': "ЁЯЧ║я╕П Analyse du sol",
        'upload_photo': "ЁЯУ╕ T├йl├йcharger une photo",
        'manual_selection': "ЁЯУЭ S├йlection manuelle",
        'select_soil_type': "S├йlectionnez le type de sol",
        'generate_recommendation': "ЁЯТб G├йn├йrer une recommandation intelligente",
        'personalized_recommendation': "### ЁЯОп Votre recommandation personnalis├йe",
        'weather_forecast': "#### ЁЯМдя╕П Pr├йvision m├йt├йo (mod├иle IA)",
        'pest_prediction': "#### ЁЯРЫ Pr├йvision des ravageurs/maladies (mod├иle IA)",
        'details': "D├йtails:",
        'crop_rotation_planner': "ЁЯМ▒ Planificateur de rotation des cultures",
        'fertilizer_optimization': "ЁЯзк Calculateur d'optimisation des engrais",
        'previous_recommendations': "ЁЯУЬ Recommandations pr├йc├йdentes",
        'built_with': "Construit avec тЭдя╕П pour une agriculture durable",
        'last_updated': "Derni├иre mise ├а jour: ",
        'signup_title': "ЁЯМ╛ Rejoignez la communaut├й agricole",
        'login_title': "ЁЯМ╛ Bienvenue ├а nouveau",
        'username': "ЁЯСд Nom de l'agriculteur",
        'farm_name': "ЁЯПб Nom de la ferme",
        'profile_picture': "ЁЯУ╖ Photo de profil (facultatif)",
        'signup_button': "тЬЕ S'inscrire maintenant",
        'login_button': "тЬЕ Connexion",
        'signup_instruction': "Remplissez vos informations pour commencer !",
        'login_instruction': "S├йlectionnez votre profil d'agriculteur pour continuer.",
        'no_account': "Pas encore de compte ? Inscrivez-vous !",
        'signup_success': "Bienvenue, {username} ! Votre compte a ├йt├й cr├й├й.",
        'login_success': "Bon retour, {username} !",
        'username_exists': "тЪая╕П Nom d'agriculteur d├йj├а pris. Essayez un autre.",
        'no_users': "Aucun agriculteur enregistr├й pour le moment. Inscrivez-vous pour commencer !"
    },
    'Spanish': {
        'title': "Sistema de Recomendaci├│n de Agricultura Sostenible",
        'farm_details': "ЁЯУП Detalles de la granja",
        'crop_preference': "ЁЯМ▒ Preferencia de cultivo",
        'soil_analysis': "ЁЯЧ║я╕П An├бlisis del suelo",
        'upload_photo': "ЁЯУ╕ Subir foto",
        'manual_selection': "ЁЯУЭ Selecci├│n manual",
        'select_soil_type': "Seleccione el tipo de suelo",
        'generate_recommendation': "ЁЯТб Generar recomendaci├│n inteligente",
        'personalized_recommendation': "### ЁЯОп Su recomendaci├│n personalizada",
        'weather_forecast': "#### ЁЯМдя╕П Pron├│stico del tiempo (modelo IA)",
        'pest_prediction': "#### ЁЯРЫ Pron├│stico de plagas/enfermedades (modelo IA)",
        'details': "Detalles:",
        'crop_rotation_planner': "ЁЯМ▒ Planificador de rotaci├│n de cultivos",
        'fertilizer_optimization': "ЁЯзк Calculadora de optimizaci├│n de fertilizantes",
        'previous_recommendations': "ЁЯУЬ Recomendaciones anteriores",
        'built_with': "Construido con тЭдя╕П para la agricultura sostenible",
        'last_updated': "├Ъltima actualizaci├│n: ",
        'signup_title': "ЁЯМ╛ ├Ъnete a la comunidad agr├нcola",
        'login_title': "ЁЯМ╛ Bienvenido de nuevo",
        'username': "ЁЯСд Nombre del agricultor",
        'farm_name': "ЁЯПб Nombre de la granja",
        'profile_picture': "ЁЯУ╖ Foto de perfil (opcional)",
        'signup_button': "тЬЕ ├Ъnete ahora",
        'login_button': "тЬЕ Iniciar sesi├│n",
        'signup_instruction': "┬бCompleta tus datos para empezar!",
        'login_instruction': "Selecciona tu perfil de agricultor para continuar.",
        'no_account': "┬┐A├║n no tienes cuenta? ┬бReg├нstrate!",
        'signup_success': "┬бBienvenido, {username}! Tu cuenta ha sido creada.",
        'login_success': "┬бBienvenido de nuevo, {username}!",
        'username_exists': "тЪая╕П Nombre de agricultor ya tomado. Prueba con otro.",
        'no_users': "A├║n no hay agricultores registrados. ┬бReg├нstrate para comenzar!"
    },
    'Tamil': {
        'title': "родро┐роЯрооро╛рой ро╡ро┐ро╡роЪро╛роп рокро░ро┐роирпНродрпБро░рпИ роЕроорпИрокрпНрокрпБ",
        'farm_details': "ЁЯУП ро╡ро┐ро╡роЪро╛роп ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
        'crop_preference': "ЁЯМ▒ рокропро┐ро░рпН ро╡ро┐ро░рпБрокрпНрокроорпН",
        'soil_analysis': "ЁЯЧ║я╕П роорогрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
        'upload_photo': "ЁЯУ╕ рокрпБроХрпИрокрпНрокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        'manual_selection': "ЁЯУЭ роХрпИроорпБро▒рпИропро┐ро▓ро╛рой родрпЗро░рпНро╡рпБ",
        'select_soil_type': "роорогрпН ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        'generate_recommendation': "ЁЯТб ро╕рпНрооро╛ро░рпНроЯрпН рокро░ро┐роирпНродрпБро░рпИропрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        'personalized_recommendation': "### ЁЯОп роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ рокро░ро┐роирпНродрпБро░рпИ",
        'weather_forecast': "#### ЁЯМдя╕П ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡рпБ (AI рооро╛родро┐ро░ро┐)",
        'pest_prediction': "#### ЁЯРЫ рокрпВроЪрпНроЪро┐/роирпЛропрпН роорпБройрпНройро▒ро┐ро╡рпБ (AI рооро╛родро┐ро░ро┐)",
        'details': "ро╡ро┐ро╡ро░роЩрпНроХро│рпН:",
        'crop_rotation_planner': "ЁЯМ▒ рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐ родро┐роЯрпНроЯроорпН",
        'fertilizer_optimization': "ЁЯзк роЙро░роорпН роорпЗроорпНрокро╛роЯрпНроЯрпБ роХрогро┐рокрпНрокро╛ройрпН",
        'previous_recommendations': "ЁЯУЬ роорпБроирпНродрпИроп рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
        'built_with': "родро┐роЯрооро╛рой ро╡ро┐ро╡роЪро╛ропродрпНродро┐ро▒рпНроХрпБ роЕройрпНрокрпБроЯройрпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
        'last_updated': "роХроЯрпИроЪро┐ропро╛роХ рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ",
        'signup_title': "ЁЯМ╛ ро╡ро┐ро╡роЪро╛роп роЪроорпВроХродрпНродро┐ро▓рпН роЪрпЗро░ро╡рпБроорпН",
        'login_title': "ЁЯМ╛ роорпАрогрпНроЯрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
        'username': "ЁЯСд ро╡ро┐ро╡роЪро╛ропро┐ рокрпЖропро░рпН",
        'farm_name': "ЁЯПб рокрогрпНрогрпИ рокрпЖропро░рпН",
        'profile_picture': "ЁЯУ╖ роЪрпБропро╡ро┐ро╡ро░ рокроЯроорпН (ро╡ро┐ро░рпБрокрпНрокрооро╛ройродрпБ)",
        'signup_button': "тЬЕ роЗрокрпНрокрпЛродрпБ роЪрпЗро░ро╡рпБроорпН",
        'login_button': "тЬЕ роЙро│рпНроирпБро┤рпИ",
        'signup_instruction': "родрпКроЯроЩрпНроХ роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роиро┐ро░рокрпНрокро╡рпБроорпН!",
        'login_instruction': "родрпКроЯро░ роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропро┐ роЪрпБропро╡ро┐ро╡ро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
        'no_account': "роЗройрпНройрпБроорпН роХрогроХрпНроХрпБ роЗро▓рпНро▓рпИропро╛? рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН!",
        'signup_success': "ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН, {username}! роЙроЩрпНроХро│рпН роХрогроХрпНроХрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ.",
        'login_success': "роорпАрогрпНроЯрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН, {username}!",
        'username_exists': "тЪая╕П ро╡ро┐ро╡роЪро╛ропро┐ рокрпЖропро░рпН роПро▒рпНроХройро╡рпЗ роОроЯрпБроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ. ро╡рпЗро▒рпБ роТро░рпБ рокрпЖропро░рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        'no_users': "роЗройрпНройрпБроорпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ. родрпКроЯроЩрпНроХ рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН!"
    },
    'Malayalam': {
        'title': "р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤╕р┤Вр┤╡р┤┐р┤зр┤╛р┤ир┤В",
        'farm_details': "ЁЯУП р┤Хр╡Гр┤╖р┤┐ р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛",
        'crop_preference': "ЁЯМ▒ р┤╡р┤┐р┤│р┤пр╡Бр┤Яр╡Ж р┤ор╡Бр╡╗р┤Чр┤гр┤и",
        'soil_analysis': "ЁЯЧ║я╕П р┤ор┤гр╡Нр┤гр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        'upload_photo': "ЁЯУ╕ р┤лр╡Лр┤Яр╡Нр┤Яр╡Л р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        'manual_selection': "ЁЯУЭ р┤ор┤╛р┤ир╡Бр┤╡р╡╜ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н",
        'select_soil_type': "р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤др┤░р┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        'generate_recommendation': "ЁЯТб р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        'personalized_recommendation': "### ЁЯОп р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤╢р╡Бр┤кр┤╛р╡╝р┤╢",
        'weather_forecast': "#### ЁЯМдя╕П р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (AI р┤ор╡Лр┤бр╡╜)",
        'pest_prediction': "#### ЁЯРЫ р┤Хр╡Ар┤Яр┤В/р┤░р╡Лр┤Чр┤В р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (AI р┤ор╡Лр┤бр╡╜)",
        'details': "р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛:",
        'crop_rotation_planner': "ЁЯМ▒ р┤╡р┤┐р┤│ р┤Ър┤Хр╡Нр┤░ р┤кр┤жр╡Нр┤зр┤др┤┐",
        'fertilizer_optimization': "ЁЯзк р┤╡р┤│р┤В р┤Ур┤кр╡Нр┤▒р╡Нр┤▒р┤┐р┤ор╡Ир┤╕р╡Зр┤╖р╡╗ р┤Хр┤╛р╡╜р┤Хр╡Нр┤Хр╡Бр┤▓р╡Зр┤▒р╡Нр┤▒р╡╝",
        'previous_recommendations': "ЁЯУЬ р┤ор╡Бр┤ор╡Нр┤кр┤др╡Нр┤др╡Ж р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛",
        'built_with': "р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤ир╡Зр┤╣р┤др╡Нр┤др╡Лр┤Яр╡Ж р┤ир┤┐р╡╝р┤ор╡Нр┤ор┤┐р┤Ър╡Нр┤Ър╡Б",
        'last_updated': "р┤Ер┤╡р┤╕р┤╛р┤ир┤ор┤╛р┤пр┤┐ р┤кр╡Бр┤др╡Бр┤Хр╡Нр┤Хр┤┐р┤пр┤др╡Н: ",
        'signup_title': "ЁЯМ╛ р┤Хр╡Гр┤╖р┤┐ р┤╕р┤ор╡Вр┤╣р┤др╡Нр┤др┤┐р╡╜ р┤Ър╡Зр┤░р╡Бр┤Х",
        'login_title': "ЁЯМ╛ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В",
        'username': "ЁЯСд р┤Хр╡╝р┤╖р┤Хр┤ир╡Нр┤▒р╡Ж р┤кр╡Зр┤░р╡Н",
        'farm_name': "ЁЯПб р┤Хр╡Гр┤╖р┤┐р┤╕р╡Нр┤ер┤▓р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤кр╡Зр┤░р╡Н",
        'profile_picture': "ЁЯУ╖ р┤кр╡Нр┤░р╡Кр┤лр╡Ир╡╜ р┤Ър┤┐р┤др╡Нр┤░р┤В (р┤Ур┤кр╡Нр┤╖р┤гр╡╜)",
        'signup_button': "тЬЕ р┤Зр┤кр╡Нр┤кр╡Лр╡╛ р┤Ър╡Зр┤░р╡Бр┤Х",
        'login_button': "тЬЕ р┤▓р╡Лр┤Чр┤┐р╡╗",
        'signup_instruction': "р┤др╡Бр┤Яр┤Щр╡Нр┤Щр┤╛р╡╗ р┤ир┤┐р┤ир╡Нр┤▒р╡Ж р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛ р┤ир╡╜р┤Хр╡Бр┤Х!",
        'login_instruction': "р┤др╡Бр┤Яр┤░р┤╛р╡╗ р┤ир┤┐р┤ир╡Нр┤▒р╡Ж р┤Хр╡╝р┤╖р┤Х р┤кр╡Нр┤░р╡Кр┤лр╡Ир╡╜ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х.",
        'no_account': "р┤Зр┤др╡Бр┤╡р┤░р╡Ж р┤Ер┤Хр╡Нр┤Хр╡Чр┤гр╡Нр┤Яр╡Н р┤Зр┤▓р╡Нр┤▓р╡З? р┤╕р╡Ир╡╗ р┤Ер┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х!",
        'signup_success': "р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В, {username}! р┤ир┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤Хр╡Нр┤Хр╡Чр┤гр╡Нр┤Яр╡Н р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Ър╡Нр┤Ър╡Б.",
        'login_success': "р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В, {username}!",
        'username_exists': "тЪая╕П р┤Хр╡╝р┤╖р┤Хр┤ир╡Нр┤▒р╡Ж р┤кр╡Зр┤░р╡Н р┤Зр┤др┤┐р┤ир┤Хр┤В р┤Ор┤Яр╡Бр┤др╡Нр┤др┤┐р┤Яр╡Нр┤Яр╡Бр┤гр╡Нр┤Яр╡Н. р┤ор┤▒р╡Нр┤▒р╡Кр┤░р╡Б р┤кр╡Зр┤░р╡Н р┤кр┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        'no_users': "р┤Зр┤др╡Бр┤╡р┤░р╡Ж р┤Хр╡╝р┤╖р┤Хр╡╝ р┤░р┤Ьр┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡╝ р┤Ър╡Жр┤пр╡Нр┤др┤┐р┤Яр╡Нр┤Яр┤┐р┤▓р╡Нр┤▓. р┤др╡Бр┤Яр┤Щр╡Нр┤Щр┤╛р╡╗ р┤╕р╡Ир╡╗ р┤Ер┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х!"
    },
    'Marathi': {
        'title': "рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреА рд╢рд┐рдлрд╛рд░рд╕ рдкреНрд░рдгрд╛рд▓реА",
        'farm_details': "ЁЯУП рд╢реЗрддреА рддрдкрд╢реАрд▓",
        'crop_preference': "ЁЯМ▒ рдкрд┐рдХ рдкреНрд░рд╛рдзрд╛рдиреНрдп",
        'soil_analysis': "ЁЯЧ║я╕П рдорд╛рддреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        'manual_selection': "ЁЯУЭ рдореЕрдиреНрдпреБрдЕрд▓ рдирд┐рд╡рдб",
        'select_soil_type': "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╢рд┐рдлрд╛рд░рд╕ рддрдпрд╛рд░ рдХрд░рд╛",
        'personalized_recommendation': "### ЁЯОп рдЖрдкрд▓реА рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕",
        'weather_forecast': "#### ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯрдХ/рд░реЛрдЧ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'details': "рддрдкрд╢реАрд▓:",
        'crop_rotation_planner': "ЁЯМ▒ рдкрд┐рдХ рдлреЗрд░рдкрд╛рд▓рдЯ рдирд┐рдпреЛрдЬрдХ",
        'fertilizer_optimization': "ЁЯзк рдЦрдд рдСрдкреНрдЯрд┐рдорд╛рдпрдЭреЗрд╢рди рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдорд╛рдЧреАрд▓ рд╢рд┐рдлрд╛рд░рд╕реА",
        'built_with': "рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреАрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рддрдпрд╛рд░ рдХреЗрд▓реЗ",
        'last_updated': "рд╢реЗрд╡рдЯрдЪреЗ рдЕрджреНрдпрддрди: ",
        'signup_title': "ЁЯМ╛ рд╢реЗрддреА рд╕рдореБрджрд╛рдпрд╛рдд рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛",
        'login_title': "ЁЯМ╛ рдкрд░рдд рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ",
        'username': "ЁЯСд рд╢реЗрддрдХрд▒реНрдпрд╛рдЪреЗ рдирд╛рд╡",
        'farm_name': "ЁЯПб рд╢реЗрддрд╛рдЪреЗ рдирд╛рд╡",
        'profile_picture': "ЁЯУ╖ рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЪрд┐рддреНрд░ (рдкрд░реНрдпрд╛рдпреА)",
        'signup_button': "тЬЕ рдЖрддрд╛ рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛",
        'login_button': "тЬЕ рд▓реЙрдЧрд┐рди",
        'signup_instruction': "рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реЗ рддрдкрд╢реАрд▓ рднрд░рд╛!",
        'login_instruction': "рдкреБрдвреЗ рдЬрд╛рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реЗ рд╢реЗрддрдХрд░реА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдирд┐рд╡рдбрд╛.",
        'no_account': "рдЕрдЬреВрди рдЦрд╛рддреЗ рдирд╛рд╣реА? рд╕рд╛рдЗрди рдЕрдк рдХрд░рд╛!",
        'signup_success': "рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username}! рдЖрдкрд▓реЗ рдЦрд╛рддреЗ рддрдпрд╛рд░ рдЭрд╛рд▓реЗ рдЖрд╣реЗ.",
        'login_success': "рдкрд░рдд рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username}!",
        'username_exists': "тЪая╕П рд╢реЗрддрдХрд▒реНрдпрд╛рдЪреЗ рдирд╛рд╡ рдЖрдзреАрдЪ рдШреЗрддрд▓реЗ рдЖрд╣реЗ. рджреБрд╕рд░реЗ рдирд╛рд╡ рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
        'no_users': "рдЕрдЬреВрди рдХреЛрдгрддреЗрд╣реА рд╢реЗрддрдХрд░реА рдиреЛрдВрджрдгреАрдХреГрдд рдирд╛рд╣реАрдд. рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд╕рд╛рдЗрди рдЕрдк рдХрд░рд╛!"
    },
    'Konkani': {
        'title': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рд░реЗрдХрдореЗрдВрдбреЗрд╢рди рд╕рд┐рд╕реНрдЯрд┐рдо",
        'farm_details': "ЁЯУП рд╢реЗрддреАрдЪреЗ рддрдкрд╢реАрд▓",
        'crop_preference': "ЁЯМ▒ рдкрд┐рдХрд╛рдЪреА рдкреНрд░рд╛рдзрд╛рдиреНрдп",
        'soil_analysis': "ЁЯЧ║я╕П рдорд╛рддреАрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        'manual_selection': "ЁЯУЭ рдореЕрдиреНрдпреБрдЕрд▓ рдирд┐рд╡рдб",
        'select_soil_type': "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╢рд┐рдлрд╛рд░рд╕ рддрдпрд╛рд░ рдХрд░рд╛",
        'personalized_recommendation': "### ЁЯОп рддреБрдордЪреА рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕",
        'weather_forecast': "#### ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯрдХ/рд░реЛрдЧрд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'details': "рддрдкрд╢реАрд▓:",
        'crop_rotation_planner': "ЁЯМ▒ рдкрд┐рдХ рдлреЗрд░рдкрд╛рд▓рдЯ рдирд┐рдпреЛрдЬрдХ",
        'fertilizer_optimization': "ЁЯзк рдЦрдд рдСрдкреНрдЯрд┐рдорд╛рдпрдЭреЗрд╢рди рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдорд╛рдЧреАрд▓ рд╢рд┐рдлрд╛рд░рд╕реА",
        'built_with': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рддрдпрд╛рд░ рдХреЗрд▓реЗ",
        'last_updated': "рд╢реЗрд╡рдЯрдЪреЗ рдЕрджреНрдпрддрди: ",
        'signup_title': "ЁЯМ╛ рд╢реЗрддреА рд╕рдореБрджрд╛рдпрд╛рдд рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛",
        'login_title': "ЁЯМ╛ рдкрд░рдд рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ",
        'username': "ЁЯСд рд╢реЗрддрдХрд▒реНрдпрд╛рдЪреЗ рдирд╛рд╡",
        'farm_name': "ЁЯПб рд╢реЗрддрд╛рдЪреЗ рдирд╛рд╡",
        'profile_picture': "ЁЯУ╖ рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЪрд┐рддреНрд░ (рдкрд░реНрдпрд╛рдпреА)",
        'signup_button': "тЬЕ рдЖрддрд╛ рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛",
        'login_button': "тЬЕ рд▓реЙрдЧрд┐рди",
        'signup_instruction': "рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реЗ рддрдкрд╢реАрд▓ рднрд░рд╛!",
        'login_instruction': "рдкреБрдвреЗ рдЬрд╛рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реЗ рд╢реЗрддрдХрд░реА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдирд┐рд╡рдбрд╛.",
        'no_account': "рдЕрдЬреВрди рдЦрд╛рддреЗ рдирд╛рд╣реА? рд╕рд╛рдЗрди рдЕрдк рдХрд░рд╛!",
        'signup_success': "рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username}! рдЖрдкрд▓реЗ рдЦрд╛рддреЗ рддрдпрд╛рд░ рдЭрд╛рд▓реЗ рдЖрд╣реЗ.",
        'login_success': "рдкрд░рдд рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username}!",
        'username_exists': "тЪая╕П рд╢реЗрддрдХрд▒реНрдпрд╛рдЪреЗ рдирд╛рд╡ рдЖрдзреАрдЪ рдШреЗрддрд▓реЗ рдЖрд╣реЗ. рджреБрд╕рд░реЗ рдирд╛рд╡ рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
        'no_users': "рдЕрдЬреВрди рдХреЛрдгрддреЗрд╣реА рд╢реЗрддрдХрд░реА рдиреЛрдВрджрдгреАрдХреГрдд рдирд╛рд╣реАрдд. рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд╕рд╛рдЗрди рдЕрдк рдХрд░рд╛!"
    },
    'Urdu': {
        'title': "┘╛╪з╪ж█М╪п╪з╪▒ ╪▓╪▒╪з╪╣╪к ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к ┌й╪з ┘Ж╪╕╪з┘Е",
        'farm_details': "ЁЯУП ╪▓╪▒╪╣█М ╪к┘Б╪╡█М┘Д╪з╪к",
        'crop_preference': "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ╪к╪▒╪м█М╪н",
        'soil_analysis': "ЁЯЧ║я╕П ┘Е┘╣█М ┌й╪з ╪к╪м╪▓█М█Б",
        'upload_photo': "ЁЯУ╕ ╪к╪╡┘И█М╪▒ ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║",
        'manual_selection': "ЁЯУЭ ╪п╪│╪к█М ╪з┘Ж╪к╪о╪з╪и",
        'select_soil_type': "┘Е┘╣█М ┌й█М ┘В╪│┘Е ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        'generate_recommendation': "ЁЯТб ╪з╪│┘Е╪з╪▒┘╣ ╪│┘Б╪з╪▒╪┤ ╪к█М╪з╪▒ ┌й╪▒█М┌║",
        'personalized_recommendation': "### ЁЯОп ╪в┘╛ ┌й█М ╪░╪з╪к█М ╪│┘Б╪з╪▒╪┤",
        'weather_forecast': "#### ЁЯМдя╕П ┘Е┘И╪│┘Е ┌й█М ┘╛█М╪┤ ┌п┘И╪ж█М (AI ┘Е╪з┌И┘Д)",
        'pest_prediction': "#### ЁЯРЫ ┌й█М┌С┘И┌║/╪и█М┘Е╪з╪▒█М ┌й█М ┘╛█М╪┤ ┌п┘И╪ж█М (AI ┘Е╪з┌И┘Д)",
        'details': "╪к┘Б╪╡█М┘Д╪з╪к:",
        'crop_rotation_planner': "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ┌п╪▒╪п╪┤ ┌й╪з ┘Е┘Ж╪╡┘И╪и█Б",
        'fertilizer_optimization': "ЁЯзк ┌й┌╛╪з╪п ┌й█М ╪з╪╡┘Д╪з╪н ┌й█М┘Д┌й┘И┘Д█М┘╣╪▒",
        'previous_recommendations': "ЁЯУЬ ┘╛┌Ж┌╛┘Д█М ╪│┘Б╪з╪▒╪┤╪з╪к",
        'built_with': "┘╛╪з╪ж█М╪п╪з╪▒ ╪▓╪▒╪з╪╣╪к ┌й█Т ┘Д█М█Т ┘Е╪н╪и╪к ╪│█Т ╪к█М╪з╪▒ ┌й█М╪з ┌п█М╪з",
        'last_updated': "╪в╪о╪▒█М ╪и╪з╪▒ ╪з┘╛ ┌И█М┘╣ ┌й█М╪з ┌п█М╪з: ",
        'signup_title': "ЁЯМ╛ ╪▓╪▒╪╣█М ╪и╪▒╪з╪п╪▒█М ┘Е█М┌║ ╪┤╪з┘Е┘Д █Б┘И┌║",
        'login_title': "ЁЯМ╛ ┘И╪з┘╛╪│ ╪о┘И╪┤ ╪в┘Е╪п█М╪п",
        'username': "ЁЯСд ┌й╪│╪з┘Ж ┌й╪з ┘Ж╪з┘Е",
        'farm_name': "ЁЯПб ┌й┌╛█М╪к ┌й╪з ┘Ж╪з┘Е",
        'profile_picture': "ЁЯУ╖ ┘╛╪▒┘И┘Б╪з╪ж┘Д ╪к╪╡┘И█М╪▒ (╪з╪о╪к█М╪з╪▒█М)",
        'signup_button': "тЬЕ ╪з╪и┌╛█М ╪┤╪з┘Е┘Д █Б┘И┌║",
        'login_button': "тЬЕ ┘Д╪з┌п ╪з┘Ж",
        'signup_instruction': "╪┤╪▒┘И╪╣ ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█М ╪к┘Б╪╡█М┘Д╪з╪к ┘╛┘П╪▒ ┌й╪▒█М┌║!",
        'login_instruction': "╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж╪з ┌й╪│╪з┘Ж ┘╛╪▒┘И┘Б╪з╪ж┘Д ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║█Ф",
        'no_account': "╪з╪и┌╛█М ╪к┌й ┌й┘И╪ж█М ╪з┌й╪з╪д┘Ж┘╣ ┘Ж█Б█М┌║ █Б█Т╪Я ╪│╪з╪ж┘Ж ╪з┘╛ ┌й╪▒█М┌║!",
        'signup_success': "╪о┘И╪┤ ╪в┘Е╪п█М╪п╪М {username}! ╪в┘╛ ┌й╪з ╪з┌й╪з╪д┘Ж┘╣ ╪и┘Ж ┌п█М╪з █Б█Т█Ф",
        'login_success': "┘И╪з┘╛╪│ ╪о┘И╪┤ ╪в┘Е╪п█М╪п╪М {username}!",
        'username_exists': "тЪая╕П ┌й╪│╪з┘Ж ┌й╪з ┘Ж╪з┘Е ┘╛█Б┘Д█Т ╪│█Т ┘Д█М╪з ╪м╪з ┌Ж┌й╪з █Б█Т█Ф ┌й┘И╪ж█М ╪з┘И╪▒ ┘Ж╪з┘Е ╪в╪▓┘Е╪з╪ж█М┌║█Ф",
        'no_users': "╪з╪и┌╛█М ╪к┌й ┌й┘И╪ж█М ┌й╪│╪з┘Ж ╪▒╪м╪│┘╣╪▒┌И ┘Ж█Б█М┌║ █Б█М┌║█Ф ╪┤╪▒┘И╪╣ ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т ╪│╪з╪ж┘Ж ╪з┘╛ ┌й╪▒█М┌║!"
    }
}

# Set page config FIRST, before any other Streamlit command
st.set_page_config(page_title=LANGUAGES['English']['title'], page_icon="ЁЯМ╛")

# Initialize database
db_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'database', 'sustainable_farming.db'))
initialize_db()

# Update initialize_db to include users table
def initialize_db():
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        # Create recommendations table (existing)
        cursor.execute('''CREATE TABLE IF NOT EXISTS recommendations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            crop TEXT,
            score REAL,
            rationale TEXT,
            carbon_score REAL,
            water_score REAL,
            erosion_score REAL,
            timestamp TEXT
        )''')
        # Create sustainability_scores table (existing)
        cursor.execute('''CREATE TABLE IF NOT EXISTS sustainability_scores (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            water_score REAL,
            fertilizer_use REAL,
            rotation INTEGER,
            score REAL
        )''')
        # Create users table
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            farm_name TEXT,
            profile_picture TEXT,
            created_at TEXT
        )''')
        conn.commit()

# Helper: Convert image to base64 for storage
def image_to_base64(image_file):
    if image_file:
        image = Image.open(image_file)
        buffered = io.BytesIO()
        image.save(buffered, format="PNG")
        return base64.b64encode(buffered.getvalue()).decode()
    return None

# Helper: Display base64 image
def display_base64_image(base64_string, size=50):
    if base64_string:
        return f'<img src="data:image/png;base64,{base64_string}" width="{size}" style="border-radius:50%;margin-right:10px;">'
    return '<span style="font-size:2em;margin-right:10px;">ЁЯСд</span>'

# --- Authentication ---
if 'user' not in st.session_state:
    st.session_state['user'] = None
if 'lang' not in st.session_state:
    st.session_state['lang'] = 'English'

# Language selection
lang = st.selectbox(
    "ЁЯМР " + LANGUAGES[st.session_state['lang']].get('select_language', 'Select Language'),
    options=list(LANGUAGES.keys()),
    index=list(LANGUAGES.keys()).index(st.session_state['lang']),
    key="language_selector"
)
st.session_state['lang'] = lang
T = LANGUAGES[lang]

# Check if user is logged in
if not st.session_state['user']:
    # Tabs for Signup and Login
    tab1, tab2 = st.tabs([T['signup_title'], T['login_title']])

    with tab1:
        st.markdown(f"<div class='card-section'><span class='section-step'>ЁЯСЛ</span><b style='font-size:1.3em'>{T['signup_title']}</b><div class='section-instructions'>{T['signup_instruction']}</div></div>", unsafe_allow_html=True)
        with st.form("signup_form"):
            col1, col2 = st.columns([1, 1])
            with col1:
                username = st.text_input(f"ЁЯСд {T['username']}", help=T['username'])
            with col2:
                farm_name = st.text_input(f"ЁЯПб {T['farm_name']}", help=T['farm_name'])
            profile_picture = st.file_uploader(f"ЁЯУ╖ {T['profile_picture']}", type=["jpg", "jpeg", "png"])
            submit_signup = st.form_submit_button(f"тЬЕ {T['signup_button']}", type="primary")

            if submit_signup:
                if username and farm_name:
                    with sqlite3.connect(db_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT username FROM users WHERE username = ?", (username,))
                        if cursor.fetchone():
                            st.error(T['username_exists'])
                        else:
                            profile_picture_base64 = image_to_base64(profile_picture)
                            cursor.execute(
                                "INSERT INTO users (username, farm_name, profile_picture, created_at) VALUES (?, ?, ?, ?)",
                                (username, farm_name, profile_picture_base64, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                            )
                            conn.commit()
                            st.session_state['user'] = {'username': username, 'farm_name': farm_name, 'profile_picture': profile_picture_base64}
                            st.success(T['signup_success'].format(username=username))
                            st.rerun()
                else:
                    st.error(T.get('fill_all_fields', "Please fill in all required fields."))

    with tab2:
        st.markdown(f"<div class='card-section'><span class='section-step'>ЁЯСЛ</span><b style='font-size:1.3em'>{T['login_title']}</b><div class='section-instructions'>{T['login_instruction']}</div></div>", unsafe_allow_html=True)
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT username, farm_name, profile_picture FROM users")
            users = cursor.fetchall()
        
        if users:
            user_options = [
                (f"{display_base64_image(user[2])} {user[0]} ({user[1]})", user) for user in users
            ]
            selected_user = st.selectbox(
                f"ЁЯСд {T.get('select_farmer', 'Select your farmer profile')}",
                options=[u[0] for u in user_options],
                format_func=lambda x: x,
                help=T['login_instruction']
            )
            if st.button(f"тЬЕ {T['login_button']}", type="primary"):
                selected_user_data = next(u[1] for u in user_options if u[0] == selected_user)
                st.session_state['user'] = {
                    'username': selected_user_data[0],
                    'farm_name': selected_user_data[1],
                    'profile_picture': selected_user_data[2]
                }
                st.success(T['login_success'].format(username=selected_user_data[0]))
                st.rerun()
        else:
            st.info(T['no_users'])
            st.markdown(f"<a href='#' onclick='st.set_page_config(page_title=\"{T['signup_title']}\");'>{T['no_account']}</a>", unsafe_allow_html=True)
else:
    # Display logged-in user
    user = st.session_state['user']
    st.markdown(
        f"<div style='display:flex;align-items:center;'>{display_base64_image(user['profile_picture'])} <b>{T.get('welcome', 'Welcome')}, {user['username']} ({user['farm_name']})!</b></div>",
        unsafe_allow_html=True
    )
    if st.button(f"ЁЯФУ {T.get('logout', 'Logout')}"):
        st.session_state['user'] = None
        st.rerun()

    # Add the 'agents' directory to the Python path
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'agents')))

    # Import the run_agent_collaboration function from agent_setup
    from agents.agent_setup import run_agent_collaboration

    # Import WeatherAnalyst and PestDiseasePredictor
    from models.weather_Analyst import WeatherAnalyst
    from models.pest_disease_predictor import PestDiseasePredictor
    from crop_rotation_planner import CropRotationPlanner
    from fertilizer_optimizer import FertilizerOptimizer

    # --- Soil Analysis Function ---
    def analyze_soil_from_photo(uploaded_file):
        try:
            image = Image.open(uploaded_file).convert("RGB")
            image_array = np.array(image)
            avg_color = np.mean(image_array, axis=(0, 1))
            r, g, b = avg_color

            # Define typical RGB ranges for soil types
            if r > 120 and g < 110 and b < 110 and r > g and r > b:
                return "Clay"
            elif r > 90 and g > 90 and b < 80 and abs(r - g) < 30:
                return "Sandy"
            elif r < 120 and g < 120 and b < 120 and abs(r - g) < 20 and abs(g - b) < 20:
                return "Loamy"

            # Fallback with Euclidean distance
            clay_rgb = (150, 80, 80)
            sandy_rgb = (140, 120, 60)
            loamy_rgb = (80, 70, 60)
            def rgb_distance(rgb1, rgb2):
                return np.sqrt(sum((a - b) ** 2 for a, b in zip(rgb1, rgb2)))
            distances = {
                "Clay": rgb_distance((r, g, b), clay_rgb),
                "Sandy": rgb_distance((r, g, b), sandy_rgb),
                "Loamy": rgb_distance((r, g, b), loamy_rgb)
            }
            return min(distances, key=distances.get)
        except Exception as e:
            st.error(f"Error processing image: {str(e)}")
            return None

    # --- Recommendation Parsing ---
    def parse_recommendation(recommendation_text):
        crops_data = []
        crop_entries = recommendation_text.split("Plant ")[1:]
        for entry in crop_entries:
            crop_match = re.match(r"(\w+):", entry)
            if not crop_match:
                continue
            crop = crop_match.group(1)
            scores = {
                "Market Score": float(re.search(r"market score: ([\d.]+)", entry).group(1)),
                "Weather Suitability": float(re.search(r"weather suitability: ([\d.]+)", entry).group(1)),
                "Sustainability": float(re.search(r"sustainability: ([\d.]+)", entry).group(1)),
                "Carbon Footprint": float(re.search(r"carbon footprint: ([\d.]+)", entry).group(1)),
                "Water": float(re.search(r"water: ([\d.]+)", entry).group(1)),
                "Erosion": float(re.search(r"erosion: ([\d.]+)", entry).group(1)),
                "Final Score": float(re.search(r"Final Score: ([\d.]+)", entry).group(1))
            }
            price_match = re.search(r"\(\$([\d.]+)/ton\)", entry)
            market_price = float(price_match.group(1)) if price_match else 0.0
            crops_data.append({"crop": crop, "scores": scores, "market_price": market_price})
        return crops_data

    # --- Modern & Responsive Custom CSS ---
    st.markdown("""
        <style>
        html, body, [class*="css"]  {
            font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(120deg, #e0f7fa 0%, #f5f7fa 100%);
        }
        .main { background-color: transparent !important; padding: 0; }
        .stButton>button {
            width: 100%;
            margin-top: 1rem;
            margin-bottom: 2rem;
            background: linear-gradient(90deg, #43cea2 0%, #185a9d 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 0.9rem;
            font-weight: 700;
            font-size: 1.1em;
            letter-spacing: 0.5px;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 12px rgba(24,90,157,0.08);
        }
        .stButton>button:hover {
            transform: translateY(-2px) scale(1.03);
            box-shadow: 0 8px 24px rgba(24,90,157,0.15);
        }
        .card-section {
            background: linear-gradient(135deg, #ffffff 0%, #e3f2fd 100%);
            border-radius: 18px;
            margin: 28px 0;
            box-shadow: 0 8px 24px rgba(24,90,157,0.08);
            padding: 2.2rem 1.5rem 1.5rem 1.5rem;
            transition: transform 0.3s;
            position: relative;
        }
        .card-section:hover { transform: translateY(-5px) scale(1.01); }
        .section-step {
            position: absolute;
            top: -22px;
            left: 24px;
            background: linear-gradient(90deg, #43cea2 0%, #185a9d 100%);
            color: #fff;
            font-weight: 700;
            font-size: 1.1em;
            border-radius: 50px;
            padding: 0.4em 1.2em;
            box-shadow: 0 2px 8px rgba(24,90,157,0.10);
            letter-spacing: 1px;
        }
        .section-icon {
            font-size: 2em;
            margin-right: 0.5em;
            vertical-align: middle;
        }
        .section-instructions {
            color: #185a9d;
            font-size: 1.08em;
            margin-bottom: 1em;
            margin-top: 0.5em;
            font-weight: 500;
        }
        .score-header {
            text-align: center;
            color: #185a9d;
            margin-bottom: 2rem;
            font-weight: 700;
            font-size: 2em;
            text-shadow: 1px 1px 2px rgba(24,90,157,0.08);
        }
        @media (max-width: 900px) {
            .card-section, .score-header { font-size: 1em !important; }
            .stButton>button { font-size: 1em; }
        }
        @media (max-width: 600px) {
            .card-section { padding: 1rem; font-size: 0.95em; }
            .score-header { font-size: 1.1em !important; }
            .stButton>button { font-size: 0.95em; padding: 0.7rem; }
        }
        </style>
    """, unsafe_allow_html=True)

    # --- Hero Section ---
    st.markdown("""
        <div style='background: linear-gradient(120deg, #43cea2 0%, #185a9d 100%), url("https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=1200&q=80"); background-size: cover; background-blend-mode: multiply; border-radius: 22px; padding: 3.5rem 1.5rem 2.5rem 1.5rem; margin-bottom: 2.5rem; box-shadow: 0 8px 32px rgba(24,90,157,0.18); color: white; text-align: center;'>
            <h1 style='font-size:2.8em; margin-bottom: 0.4em; letter-spacing: 1px;'>ЁЯМ╛ Sustainable Farming AI Platform</h1>
            <p style='font-size:1.25em; margin-bottom: 1.2em; max-width: 600px; margin-left:auto; margin-right:auto;'>Empowering farmers with <b>real-time, AI-powered recommendations</b> for a greener, more profitable future. Plan, optimize, and track your farm with easeтАФon any device.</p>
            <div style='display: flex; flex-wrap: wrap; justify-content: center; gap: 1.2em; margin-bottom: 1.2em;'>
                <div style='background: rgba(255,255,255,0.13); border-radius: 12px; padding: 1em 1.5em; font-size: 1.1em; display: flex; align-items: center; gap: 0.5em;'><span style='font-size:1.5em;'>ЁЯМ▒</span> Crop Planning</div>
                <div style='background: rgba(255,255,255,0.13); border-radius: 12px; padding: 1em 1.5em; font-size: 1.1em; display: flex; align-items: center; gap: 0.5em;'><span style='font-size:1.5em;'>ЁЯзк</span> Fertilizer Optimization</div>
                <div style='background: rgba(255,255,255,0.13); border-radius: 12px; padding: 1em 1.5em; font-size: 1.1em; display: flex; align-items: center; gap: 0.5em;'><span style='font-size:1.5em;'>ЁЯУК</span> Sustainability Tracking</div>
                <div style='background: rgba(255,255,255,0.13); border-radius: 12px; padding: 1em 1.5em; font-size: 1.1em; display: flex; align-items: center; gap: 0.5em;'><span style='font-size:1.5em;'>ЁЯдЦ</span> AI Insights</div>
            </div>
            <div style='margin-top: 1.2em; font-size: 1.1em; background: rgba(255,255,255,0.10); border-radius: 8px; display: inline-block; padding: 0.7em 1.5em;'>
                <b>Get started below тАФ follow the steps for a seamless experience!</b>
            </div>
        </div>
    """, unsafe_allow_html=True)

    # --- Main Content ---
    st.markdown(f"""
        <div class='card-section'>
            <span class='section-step'>1</span>
            <span class='section-icon'>ЁЯУП</span>
            <b style='font-size:1.3em'>{T['farm_details']}</b>
            <div class='section-instructions'>{T.get('farm_details_instruction', 'Enter your farm size and crop preference.')}</div>
            <div style='display:flex;gap:2em;justify-content:center;margin-top:1em;'>
                <div style='text-align:center;'>
                    <span style='font-size:2.5em;'>ЁЯМ╛</span><br><span style='font-size:1.1em;'>{T.get('farm_size_label', 'Farm size')}</span>
                </div>
                <div style='text-align:center;'>
                    <span style='font-size:2.5em;'>ЁЯМ▒</span><br><span style='font-size:1.1em;'>{T.get('crop_preference_label', 'Crop type')}</span>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2, gap="large")
    with col1:
        land_size = st.select_slider(
            f"ЁЯМ╛ {T.get('farm_size_label', 'Farm size (hectares)')}",
            options=[1, 2, 5, 8, 10, 15, 20],
            value=8,
            help=T.get('farm_size_help', "Slide to select your farm size")
        )
    with col2:
        crop_preference = st.selectbox(
            f"ЁЯМ▒ {T.get('crop_preference_label', 'What would you like to grow?')}",
            options=["Grains", "Vegetables", "Fruits"],
            help=T.get('crop_preference_help', "Choose your preferred crop type")
        )

    st.markdown(f"""
        <div class='card-section'>
            <span class='section-step'>2</span>
            <span class='section-icon'>ЁЯЧ║я╕П</span>
            <b style='font-size:1.3em'>{T['soil_analysis']}</b>
            <div class='section-instructions'>{T.get('soil_analysis_instruction', 'Analyze your soil by uploading a photo or selecting manually.')}</div>
            <div style='display:flex;gap:2em;justify-content:center;margin-top:1em;'>
                <div style='text-align:center;'>
                    <span style='font-size:2.5em;'>ЁЯУ╕</span><br><span style='font-size:1.1em;'>{T['upload_photo']}</span>
                </div>
                <div style='text-align:center;'>
                    <span style='font-size:2.5em;'>ЁЯУЭ</span><br><span style='font-size:1.1em;'>{T['manual_selection']}</span>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)

    soil_type = None
    soil_option = st.radio(
        f"ЁЯЧ║я╕П {T.get('soil_option_label', 'How would you like to determine your soil type?')}",
        [T['upload_photo'], T['manual_selection']],
        horizontal=True
    )
    if soil_option == T['upload_photo']:
        soil_photo = st.file_uploader(f"ЁЯУ╕ {T['upload_photo']}", type=["jpg", "jpeg", "png"], key="soil_photo_uploader")
        if soil_photo:
            soil_type = analyze_soil_from_photo(soil_photo)
            if soil_type:
                st.success(f"тЬЕ {T.get('detected_soil_type', 'Detected soil type')}: {soil_type}")
            else:
                st.warning(T.get('could_not_detect_soil', "тЪая╕П Could not determine soil type from photo. Please select manually."))
                soil_type = st.selectbox(f"ЁЯУЭ {T['select_soil_type']}", options=["Loamy", "Sandy", "Clay"], key="manual_soil_select")
        else:
            soil_type = st.selectbox(f"ЁЯУЭ {T['select_soil_type']}", options=["Loamy", "Sandy", "Clay"], key="manual_soil_select_fallback")
    elif soil_option == T['manual_selection']:
        soil_type = st.selectbox(f"ЁЯУЭ {T['select_soil_type']}", options=["Loamy", "Sandy", "Clay"], key="manual_soil_select")

    st.markdown(f"""
        <div class='card-section'>
            <span class='section-step'>3</span>
            <span class='section-icon'>ЁЯТб</span>
            <b style='font-size:1.3em'>{T['generate_recommendation']}</b>
            <div class='section-instructions'>{T.get('recommendation_instruction', 'Click the button below to get your personalized AI-powered recommendation!')}</div>
            <div style='display:flex;gap:2em;justify-content:center;margin-top:1em;'>
                <div style='text-align:center;'>
                    <span style='font-size:2.5em;'>ЁЯдЦ</span><br><span style='font-size:1.1em;'>{T['generate_recommendation']}</span>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)

    # --- Recommendation Generation ---
    if st.button(T['generate_recommendation'], type="primary"):
        with st.spinner("ЁЯФД Analyzing your farm conditions..."):
            try:
                result = run_agent_collaboration(land_size=land_size, soil_type=soil_type, crop_preference=crop_preference)
                crops_data = parse_recommendation(result['recommendation'])

                # --- Weather Forecasting (using WeatherAnalyst) ---
                weather_analyst = WeatherAnalyst()
                soil_ph = 6.5
                soil_moisture = 25
                fertilizer = 50
                pesticide = 5
                weather_forecast = weather_analyst.forecast(soil_ph, soil_moisture, fertilizer, pesticide)
                st.markdown(T['weather_forecast'])
                st.info(f"Predicted Temperature: {weather_forecast['temperature'][0]:.1f}┬░C, Predicted Rainfall: {weather_forecast['rainfall'][0]:.1f} mm")

                # --- Pest/Disease Prediction (using PestDiseasePredictor) ---
                pest_predictor = PestDiseasePredictor()
                pest_prediction = pest_predictor.predict(
                    crop_type=crop_preference,
                    soil_ph=soil_ph,
                    soil_moisture=soil_moisture,
                    temperature=weather_forecast['temperature'][0],
                    rainfall=weather_forecast['rainfall'][0]
                )
                st.markdown(T['pest_prediction'])
                st.info(pest_prediction)

                st.markdown(T['personalized_recommendation'])

                details = result['recommendation'].split("Details:")[1].strip()
                details_html = details.replace('\n', '<br>')
                st.markdown(f"<div class='card-section'><strong>{T['details']}</strong><br>{details_html}</div>", unsafe_allow_html=True)

                if 'Weather Forecast' in result and result['Weather Forecast']:
                    st.markdown("#### ЁЯМдя╕П Weather Forecast (Agent)")
                    st.info(result['Weather Forecast'])

                if 'Pest/Disease Prediction' in result and result['Pest/Disease Prediction']:
                    st.markdown("#### ЁЯРЫ Pest/Disease Prediction (Agent)")
                    st.info(result['Pest/Disease Prediction'])

                if 'Warnings' in result and result['Warnings']:
                    for warn in result['Warnings']:
                        st.warning(f"Weather Alert: {warn}")

                if 'Pest/Disease Advice' in result and result['Pest/Disease Advice']:
                    st.info(f"Pest/Disease Advice: {result['Pest/Disease Advice']}")

                for crop_data in crops_data:
                    crop = crop_data['crop']
                    scores = crop_data['scores']
                    market_price = crop_data['market_price']
                    labels = list(scores.keys())
                    values = [score * 100 for score in scores.values()]
                    fig = go.Figure(data=[go.Bar(y=labels, x=values, orientation='h', marker=dict(color=[
                        "#4caf50", "#2196f3", "#ff9800", "#607d8b", "#00bcd4", "#795548", "#e91e63"
                    ]), text=[f"{val:.1f}%" for val in values], textposition='auto')])
                    fig.update_layout(title=f"{crop.capitalize()} Scores (Market Price: ${market_price:.2f}/ton)", title_x=0.5, xaxis_title="Score (%)", yaxis_title="Category", xaxis=dict(range=[0, 100]), margin=dict(l=0, r=0, t=40, b=0), height=400)
                    st.plotly_chart(fig, use_container_width=True)

                st.markdown("<h3 class='score-header'>ЁЯУК Detailed Score Analysis</h3>", unsafe_allow_html=True)
                for chart in result['chart_data']:
                    crop = chart['crop']
                    labels = chart['labels']
                    values = chart['values']
                    fig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', hoverinfo='label+value', marker=dict(colors=[
                        "#4caf50", "#2196f3", "#ff9800", "#607d8b", "#00bcd4", "#795548", "#e91e63"
                    ]))])
                    fig.update_layout(title=f"{crop.capitalize()} Score Distribution", title_x=0.5, margin=dict(l=0, r=0, t=40, b=0), legend=dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5))
                    st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"тЪая╕П An error occurred: {str(e)}")

    st.markdown("<hr>", unsafe_allow_html=True)
    st.header(T['crop_rotation_planner'])
    planner = CropRotationPlanner(db_path=db_path)
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT crop FROM recommendations ORDER BY timestamp DESC LIMIT 1")
            latest_crop = cursor.fetchone()
        if latest_crop:
            latest_crop = latest_crop[0]
            plan = planner.generate_plan(latest_crop)
            st.success(f"Last planted crop: {latest_crop}. Suggested rotation plan:")
            st.plotly_chart(planner.create_timeline(plan), use_container_width=True)
        else:
            st.info("No crop history found. Generate a recommendation to start building your rotation plan!")
    except Exception as e:
        st.warning(f"Could not load crop rotation plan: {str(e)}")

    st.markdown("<hr>", unsafe_allow_html=True)
    st.header(T['fertilizer_optimization'])
    with st.form("fertilizer_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            fert_soil = st.selectbox("Soil Type", ["Loamy", "Sandy", "Clay"], key="fert_soil")
        with col2:
            fert_crop = st.selectbox("Crop Type", ["Wheat", "Corn", "Rice", "Soybeans", "Tomatoes", "Carrots"], key="fert_crop")
        with col3:
            fert_land = st.number_input("Land Size (hectares)", min_value=1, max_value=100, value=8, key="fert_land")
        submitted = st.form_submit_button("Calculate Optimal Fertilizer")
    if submitted and 'fert_soil' in st.session_state and 'fert_crop' in st.session_state and 'fert_land' in st.session_state:
        optimizer = FertilizerOptimizer(db_path=db_path)
        result = optimizer.calculate_fertilizer(st.session_state['fert_land'], st.session_state['fert_soil'], st.session_state['fert_crop'])
        st.success(f"For {st.session_state['fert_land']} hectares of {st.session_state['fert_soil'].lower()} soil planting {st.session_state['fert_crop'].lower()}, use:")
        st.write(f"- Nitrogen: {result['nitrogen_kg']} kg")
        st.write(f"- Phosphorus: {result['phosphorus_kg']} kg")
        st.write(f"- Potassium: {result['potassium_kg']} kg")
        st.caption("*This recommendation factors in sustainability by reducing excess fertilizer to lower carbon footprint.")

    st.markdown(f"<h3 class='score-header'>{T['previous_recommendations']}</h3>", unsafe_allow_html=True)
    st.subheader(T['previous_recommendations'], divider="green")
    try:
        with sqlite3.connect(db_path) as conn:
            past_recommendations = pd.read_sql("SELECT * FROM recommendations ORDER BY timestamp DESC LIMIT 5", conn)
        if not past_recommendations.empty:
            st.dataframe(
                past_recommendations[['crop', 'score', 'rationale', 'carbon_score', 'water_score', 'erosion_score', 'timestamp']],
                use_container_width=True,
                column_config={
                    "crop": "Crop",
                    "score": "Final Score",
                    "rationale": "Rationale",
                    "carbon_score": "Carbon Footprint Score",
                    "water_score": "Water Score",
                    "erosion_score": "Erosion Score",
                    "timestamp": "Timestamp"
                },
                hide_index=True
            )
        else:
            st.info("No past recommendations found.")
    except Exception as e:
        st.warning(f"Could not load past recommendations: {str(e)}")

    # --- Sustainability Score Tracker ---
    st.markdown("<hr>", unsafe_allow_html=True)
    st.header("ЁЯМ▒ Sustainability Score Tracker")

    # Recommended values
    RECOMMENDED_WATER = 2.0  # e.g., 2 ML/ha/season
    RECOMMENDED_FERTILIZER = 1.5  # e.g., 1.5 tons/ha/season

    # Helper: Calculate sustainability score
    def calculate_sustainability_score(row):
        score = 100
        water = row.get('water_score', 0)
        if water > RECOMMENDED_WATER:
            score -= min(30, 30 * (water - RECOMMENDED_WATER) / RECOMMENDED_WATER)
        fert = row.get('fertilizer_use', 0)
        if fert > RECOMMENDED_FERTILIZER:
            score -= min(30, 30 * (fert - RECOMMENDED_FERTILIZER) / RECOMMENDED_FERTILIZER)
        if row.get('rotation', False):
            score += 10
        else:
            score -= 10
        return max(0, min(100, score))

    # Ensure sustainability_scores table exists
    with sqlite3.connect(db_path) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS sustainability_scores (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            water_score REAL,
            fertilizer_use REAL,
            rotation INTEGER,
            score REAL
        )''')
        conn.commit()

    # --- User Input for Current Season ---
    with st.form("sustainability_form"):
        st.markdown("**Log your current season's practices:**")
        col1, col2, col3 = st.columns(3)
        with col1:
            water_score = st.number_input("Water usage (ML/ha)", min_value=0.0, max_value=10.0, value=RECOMMENDED_WATER, step=0.1)
        with col2:
            fertilizer_use = st.number_input("Fertilizer use (tons/ha)", min_value=0.0, max_value=10.0, value=RECOMMENDED_FERTILIZER, step=0.1)
        with col3:
            rotation = st.checkbox("Practiced crop rotation?", value=True)
        submitted = st.form_submit_button("Log Season")

    if submitted:
        score = calculate_sustainability_score({'water_score': water_score, 'fertilizer_use': fertilizer_use, 'rotation': rotation})
        ts = datetime.now().strftime("%Y-%m-%d")
        with sqlite3.connect(db_path) as conn:
            conn.execute("INSERT INTO sustainability_scores (timestamp, water_score, fertilizer_use, rotation, score) VALUES (?, ?, ?, ?, ?)",
                         (ts, water_score, fertilizer_use, int(rotation), score))
            conn.commit()
        st.success(f"Logged! Your sustainability score for this season: {score:.1f}")

    # Fetch all scores
    with sqlite3.connect(db_path) as conn:
        df_scores = pd.read_sql("SELECT * FROM sustainability_scores ORDER BY timestamp ASC", conn)

    # Plot trend chart
    if not df_scores.empty:
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df_scores['timestamp'], y=df_scores['score'], mode='lines+markers', name='Sustainability Score', line=dict(color='#4caf50', width=3)))
        fig.update_layout(title="Sustainability Score Over Time", xaxis_title="Season", yaxis_title="Score", height=350)
        st.plotly_chart(fig, use_container_width=True)

        if len(df_scores) > 1:
            prev = df_scores['score'].iloc[-2]
            curr = df_scores['score'].iloc[-1]
            pct = ((curr - prev) / prev) * 100 if prev != 0 else 0
            if pct > 0:
                st.success(f"Your sustainability score has improved by {pct:.1f}% since last season!")
            elif pct < 0:
                st.warning(f"Your sustainability score has decreased by {abs(pct):.1f}% since last season.")
            else:
                st.info("Your sustainability score is unchanged since last season.")

        tips = []
        last = df_scores.iloc[-1]
        if last['fertilizer_use'] > RECOMMENDED_FERTILIZER:
            tips.append(f"Reduce fertilizer use to below {RECOMMENDED_FERTILIZER} tons/ha. Try organic options.")
        if last['water_score'] > RECOMMENDED_WATER:
            tips.append(f"Reduce water usage to below {RECOMMENDED_WATER} ML/ha. Consider drip irrigation or mulching.")
        if not last['rotation']:
            tips.append("Practice crop rotation next season to improve soil health and sustainability.")
        if tips:
            st.markdown("**Tips to improve your score:**")
            for tip in tips:
                st.info(tip)
        else:
            st.success("Great job! Your practices are highly sustainable.")
    else:
        st.info("No sustainability score data found. Log your first season above!")

    # --- Footer ---
    current_time = datetime.now().strftime("%B %d, %Y at %I:%M %p IST")
    st.markdown(f"""
        ---
        <div style='text-align: center; color: #666;'>
            <p>{T['built_with']}</p>
            <p><small>{T['last_updated']} {current_time}</small></p>
        </div>
    """, unsafe_allow_html=True)
