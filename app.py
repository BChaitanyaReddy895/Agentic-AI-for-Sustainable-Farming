
import streamlit as st
import sys
import os
import sqlite3
import pandas as pd
from datetime import datetime
from agents.init_db import initialize_db
import plotly.graph_objects as go
from PIL import Image
import numpy as np
import re

# --- Multilingual Support ---
LANGUAGES = {
    'English': {
        'title': "Sustainable Farming Recommendation System",
        'farm_details': "ЁЯУП Farm Details",
        'crop_preference': "ЁЯМ▒ Crop Preference",
        'soil_analysis': "ЁЯЧ║я╕П Soil Analysis",
        'upload_photo': "ЁЯУ╕ Upload a photo",
        'manual_selection': "ЁЯУЭ Manual selection",
        'select_soil_type': "Select soil type",
        'generate_recommendation': "ЁЯТб Generate Smart Recommendation",
        'personalized_recommendation': "### ЁЯОп Your Personalized Recommendation",
        'weather_forecast': "#### ЁЯМдя╕П Weather Forecast (AI Model)",
        'pest_prediction': "#### ЁЯРЫ Pest/Disease Prediction (AI Model)",
        'details': "Details:",
        'crop_rotation_planner': "ЁЯМ▒ Crop Rotation Planner",
        'fertilizer_optimization': "ЁЯзк Fertilizer Optimization Calculator",
        'previous_recommendations': "ЁЯУЬ Previous Recommendations",
        'voice_assistant': "ЁЯОд Voice Assistant",
        'built_with': "Built with тЭдя╕П for sustainable farming",
        'last_updated': "Last updated: "
    },
    'Telugu': {
        'title': "р░╕р░╕р▒Нр░Яр▒Ир░ир░мр▒Бр░▓р▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Вр░Ър░и р░╡р▒Нр░пр░╡р░╕р▒Нр░е",
        'farm_details': "ЁЯУП р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░┐р░╡р░░р░╛р░▓р▒Б",
        'crop_preference': "ЁЯМ▒ р░кр░Вр░Я р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д",
        'soil_analysis': "ЁЯЧ║я╕П р░ир▒Зр░▓ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        'upload_photo': "ЁЯУ╕ р░лр▒Лр░Яр▒Лр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        'manual_selection': "ЁЯУЭ р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Н р░Ор░Вр░кр░┐р░Х",
        'select_soil_type': "р░ир▒Зр░▓ р░░р░Хр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        'generate_recommendation': "ЁЯТб р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╕р▒Вр░Ър░ир░ир▒Б р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
        'personalized_recommendation': "### ЁЯОп р░ор▒А р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р▒Вр░Ър░и",
        'weather_forecast': "#### ЁЯМдя╕П р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и (AI р░ор▒Лр░бр░▓р▒Н)",
        'pest_prediction': "#### ЁЯРЫ р░др▒Жр░Чр▒Бр░▓р▒Б/р░кр▒Бр░░р▒Бр░Чр▒Б р░╕р▒Вр░Ър░и (AI р░ор▒Лр░бр░▓р▒Н)",
        'details': "р░╡р░┐р░╡р░░р░╛р░▓р▒Б:",
        'crop_rotation_planner': "ЁЯМ▒ р░кр░Вр░Я р░ор░╛р░░р▒Нр░кр░┐р░бр░┐ р░кр▒Нр░░р░гр░╛р░│р░┐р░Х",
        'fertilizer_optimization': "ЁЯзк р░Ор░░р▒Бр░╡р▒Б р░Жр░кр▒Нр░Яр░┐р░ор▒Ир░Ьр▒Зр░╖р░ир▒Н р░Хр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр░░р▒Н",
        'previous_recommendations': "ЁЯУЬ р░Чр░д р░╕р▒Вр░Ър░ир░▓р▒Б",
        'voice_assistant': "ЁЯОд р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н",
        'built_with': "р░╕р░╕р▒Нр░Яр▒Ир░ир░мр▒Бр░▓р▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Хр▒Лр░╕р░В р░кр▒Нр░░р▒Зр░ор░др▒Л р░ир░┐р░░р▒Нр░ор░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐",
        'last_updated': "р░Ър░┐р░╡р░░р░┐р░Чр░╛ р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐: "
    }
    ,
    'Kannada': {
        'title': "р▓╕р│Нр▓ер▓┐р▓░ р▓Хр│Гр▓╖р▓┐ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж",
        'farm_details': "ЁЯУП р▓Хр│Гр▓╖р▓┐ р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Б",
        'crop_preference': "ЁЯМ▒ р▓мр│Жр▓│р│Ж р▓Жр▓жр│Нр▓пр▓др│Ж",
        'soil_analysis': "ЁЯЧ║я╕П р▓ор▓гр│Нр▓гр│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж",
        'upload_photo': "ЁЯУ╕ р▓лр│Лр▓Яр│Л р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐",
        'manual_selection': "ЁЯУЭ р▓Хр│Ир▓пр▓╛р▓░р│Ж р▓Жр▓пр│Нр▓Хр│Ж",
        'select_soil_type': "р▓ор▓гр│Нр▓гр▓┐р▓и р▓кр│Нр▓░р▓Хр▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
        'generate_recommendation': "ЁЯТб р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓░р▓Ър▓┐р▓╕р▓┐",
        'personalized_recommendation': "### ЁЯОп р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б",
        'weather_forecast': "#### ЁЯМдя╕П р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж (AI р▓ор▓╛р▓жр▓░р▓┐)",
        'pest_prediction': "#### ЁЯРЫ р▓Хр│Ар▓Я/р▓░р│Лр▓Ч р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж (AI р▓ор▓╛р▓жр▓░р▓┐)",
        'details': "р▓╡р▓┐р▓╡р▓░р▓Чр▓│р│Б:",
        'crop_rotation_planner': "ЁЯМ▒ р▓мр│Жр▓│р│Ж р▓кр▓░р▓┐р▓╡р▓░р│Нр▓др▓ир│Ж р▓пр│Лр▓Ьр▓ир│Ж",
        'fertilizer_optimization': "ЁЯзк р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░ р▓Жр▓кр│Нр▓Яр▓┐р▓ор│Ир▓╕р│Зр▓╢р▓ир│Н р▓Хр│Нр▓пр▓╛р▓▓р│Нр▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н",
        'previous_recommendations': "ЁЯУЬ р▓╣р▓┐р▓Вр▓жр▓┐р▓и р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
        'voice_assistant': "ЁЯОд р▓зр│Нр▓╡р▓ир▓┐ р▓╕р▓╣р▓╛р▓пр▓Х",
        'built_with': "р▓╕р│Нр▓ер▓┐р▓░ р▓Хр│Гр▓╖р▓┐р▓Чр▓╛р▓Чр▓┐ р▓кр│Нр▓░р│Ар▓др▓┐р▓пр▓┐р▓Вр▓ж р▓ир▓┐р▓░р│Нр▓ор▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж",
        'last_updated': "р▓Хр│Кр▓ир│Жр▓пр▓жр▓╛р▓Чр▓┐ р▓ир▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж: "
    },
    'Hindi': {
        'title': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА",
        'farm_details': "ЁЯУП рдХреГрд╖рд┐ рд╡рд┐рд╡рд░рдг",
        'crop_preference': "ЁЯМ▒ рдлрд╕рд▓ рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
        'soil_analysis': "ЁЯЧ║я╕П рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        'manual_selection': "ЁЯУЭ рдореИрдиреНрдпреБрдЕрд▓ рдЪрдпрди",
        'select_soil_type': "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдЙрддреНрдкрдиреНрди рдХрд░реЗрдВ",
        'personalized_recommendation': "### ЁЯОп рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢",
        'weather_forecast': "#### ЁЯМдя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (AI рдореЙрдбрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯ/рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (AI рдореЙрдбрд▓)",
        'details': "рд╡рд┐рд╡рд░рдг:",
        'crop_rotation_planner': "ЁЯМ▒ рдлрд╕рд▓ рдЪрдХреНрд░ рдпреЛрдЬрдирд╛",
        'fertilizer_optimization': "ЁЯзк рдЙрд░реНрд╡рд░рдХ рдЕрдиреБрдХреВрд▓рди рдХреИрд▓рдХреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдкрд┐рдЫрд▓реА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        'voice_assistant': "ЁЯОд рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ",
        'built_with': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛",
        'last_updated': "рдЕрдВрддрд┐рдо рдмрд╛рд░ рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛: "
    },
    'French': {
        'title': "Syst├иme de recommandation agricole durable",
        'farm_details': "ЁЯУП D├йtails de la ferme",
        'crop_preference': "ЁЯМ▒ Pr├йf├йrence de culture",
        'soil_analysis': "ЁЯЧ║я╕П Analyse du sol",
        'upload_photo': "ЁЯУ╕ T├йl├йcharger une photo",
        'manual_selection': "ЁЯУЭ S├йlection manuelle",
        'select_soil_type': "S├йlectionnez le type de sol",
        'generate_recommendation': "ЁЯТб G├йn├йrer une recommandation intelligente",
        'personalized_recommendation': "### ЁЯОп Votre recommandation personnalis├йe",
        'weather_forecast': "#### ЁЯМдя╕П Pr├йvision m├йt├йo (mod├иle IA)",
        'pest_prediction': "#### ЁЯРЫ Pr├йvision des ravageurs/maladies (mod├иle IA)",
        'details': "D├йtails:",
        'crop_rotation_planner': "ЁЯМ▒ Planificateur de rotation des cultures",
        'fertilizer_optimization': "ЁЯзк Calculateur d'optimisation des engrais",
        'previous_recommendations': "ЁЯУЬ Recommandations pr├йc├йdentes",
        'voice_assistant': "ЁЯОд Assistant vocal",
        'built_with': "Construit avec тЭдя╕П pour une agriculture durable",
        'last_updated': "Derni├иre mise ├а jour: "
    },
    'Spanish': {
        'title': "Sistema de Recomendaci├│n de Agricultura Sostenible",
        'farm_details': "ЁЯУП Detalles de la granja",
        'crop_preference': "ЁЯМ▒ Preferencia de cultivo",
        'soil_analysis': "ЁЯЧ║я╕П An├бlisis del suelo",
        'upload_photo': "ЁЯУ╕ Subir foto",
        'manual_selection': "ЁЯУЭ Selecci├│n manual",
        'select_soil_type': "Seleccione el tipo de suelo",
        'generate_recommendation': "ЁЯТб Generar recomendaci├│n inteligente",
        'personalized_recommendation': "### ЁЯОп Su recomendaci├│n personalizada",
        'weather_forecast': "#### ЁЯМдя╕П Pron├│stico del tiempo (modelo IA)",
        'pest_prediction': "#### ЁЯРЫ Pron├│stico de plagas/enfermedades (modelo IA)",
        'details': "Detalles:",
        'crop_rotation_planner': "ЁЯМ▒ Planificador de rotaci├│n de cultivos",
        'fertilizer_optimization': "ЁЯзк Calculadora de optimizaci├│n de fertilizantes",
        'previous_recommendations': "ЁЯУЬ Recomendaciones anteriores",
        'voice_assistant': "ЁЯОд Asistente de voz",
        'built_with': "Construido con тЭдя╕П para la agricultura sostenible",
        'last_updated': "├Ъltima actualizaci├│n: "
    },
    'Tamil': {
        'title': "родро┐роЯрооро╛рой ро╡ро┐ро╡роЪро╛роп рокро░ро┐роирпНродрпБро░рпИ роЕроорпИрокрпНрокрпБ",
        'farm_details': "ЁЯУП ро╡ро┐ро╡роЪро╛роп ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
        'crop_preference': "ЁЯМ▒ рокропро┐ро░рпН ро╡ро┐ро░рпБрокрпНрокроорпН",
        'soil_analysis': "ЁЯЧ║я╕П роорогрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
        'upload_photo': "ЁЯУ╕ рокрпБроХрпИрокрпНрокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        'manual_selection': "ЁЯУЭ роХрпИроорпБро▒рпИропро┐ро▓ро╛рой родрпЗро░рпНро╡рпБ",
        'select_soil_type': "роорогрпН ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        'generate_recommendation': "ЁЯТб ро╕рпНрооро╛ро░рпНроЯрпН рокро░ро┐роирпНродрпБро░рпИропрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        'personalized_recommendation': "### ЁЯОп роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ рокро░ро┐роирпНродрпБро░рпИ",
        'weather_forecast': "#### ЁЯМдя╕П ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡рпБ (AI рооро╛родро┐ро░ро┐)",
        'pest_prediction': "#### ЁЯРЫ рокрпВроЪрпНроЪро┐/роирпЛропрпН роорпБройрпНройро▒ро┐ро╡рпБ (AI рооро╛родро┐ро░ро┐)",
        'details': "ро╡ро┐ро╡ро░роЩрпНроХро│рпН:",
        'crop_rotation_planner': "ЁЯМ▒ рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐ родро┐роЯрпНроЯроорпН",
        'fertilizer_optimization': "ЁЯзк роЙро░роорпН роорпЗроорпНрокро╛роЯрпНроЯрпБ роХрогро┐рокрпНрокро╛ройрпН",
        'previous_recommendations': "ЁЯУЬ роорпБроирпНродрпИроп рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
        'voice_assistant': "ЁЯОд роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН",
        'built_with': "родро┐роЯрооро╛рой ро╡ро┐ро╡роЪро╛ропродрпНродро┐ро▒рпНроХрпБ роЕройрпНрокрпБроЯройрпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
        'last_updated': "роХроЯрпИроЪро┐ропро╛роХ рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: "
    },
    'Malayalam': {
        'title': "р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤╕р┤Вр┤╡р┤┐р┤зр┤╛р┤ир┤В",
        'farm_details': "ЁЯУП р┤Хр╡Гр┤╖р┤┐ р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛",
        'crop_preference': "ЁЯМ▒ р┤╡р┤┐р┤│р┤пр╡Бр┤Яр╡Ж р┤ор╡Бр╡╗р┤Чр┤гр┤и",
        'soil_analysis': "ЁЯЧ║я╕П р┤ор┤гр╡Нр┤гр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        'upload_photo': "ЁЯУ╕ р┤лр╡Лр┤Яр╡Нр┤Яр╡Л р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        'manual_selection': "ЁЯУЭ р┤ор┤╛р┤ир╡Бр┤╡р╡╜ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н",
        'select_soil_type': "р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤др┤░р┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        'generate_recommendation': "ЁЯТб р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        'personalized_recommendation': "### ЁЯОп р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤╢р╡Бр┤кр┤╛р╡╝р┤╢",
        'weather_forecast': "#### ЁЯМдя╕П р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (AI р┤ор╡Лр┤бр╡╜)",
        'pest_prediction': "#### ЁЯРЫ р┤Хр╡Ар┤Яр┤В/р┤░р╡Лр┤Чр┤В р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (AI р┤ор╡Лр┤бр╡╜)",
        'details': "р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛:",
        'crop_rotation_planner': "ЁЯМ▒ р┤╡р┤┐р┤│ р┤Ър┤Хр╡Нр┤░ р┤кр┤жр╡Нр┤зр┤др┤┐",
        'fertilizer_optimization': "ЁЯзк р┤╡р┤│р┤В р┤Ур┤кр╡Нр┤▒р╡Нр┤▒р┤┐р┤ор╡Ир┤╕р╡Зр┤╖р╡╗ р┤Хр┤╛р╡╜р┤Хр╡Нр┤Хр╡Бр┤▓р╡Зр┤▒р╡Нр┤▒р╡╝",
        'previous_recommendations': "ЁЯУЬ р┤ор╡Бр┤ор╡Нр┤кр┤др╡Нр┤др╡Ж р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛",
        'voice_assistant': "ЁЯОд р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н",
        'built_with': "р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤ир╡Зр┤╣р┤др╡Нр┤др╡Лр┤Яр╡Ж р┤ир┤┐р╡╝р┤ор╡Нр┤ор┤┐р┤Ър╡Нр┤Ър╡Б",
        'last_updated': "р┤Ер┤╡р┤╕р┤╛р┤ир┤ор┤╛р┤пр┤┐ р┤кр╡Бр┤др╡Бр┤Хр╡Нр┤Хр┤┐р┤пр┤др╡Н: "
    },
    'Marathi': {
        'title': "рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреА рд╢рд┐рдлрд╛рд░рд╕ рдкреНрд░рдгрд╛рд▓реА",
        'farm_details': "ЁЯУП рд╢реЗрддреА рддрдкрд╢реАрд▓",
        'crop_preference': "ЁЯМ▒ рдкрд┐рдХ рдкреНрд░рд╛рдзрд╛рдиреНрдп",
        'soil_analysis': "ЁЯЧ║я╕П рдорд╛рддреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        'manual_selection': "ЁЯУЭ рдореЕрдиреНрдпреБрдЕрд▓ рдирд┐рд╡рдб",
        'select_soil_type': "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╢рд┐рдлрд╛рд░рд╕ рддрдпрд╛рд░ рдХрд░рд╛",
        'personalized_recommendation': "### ЁЯОп рдЖрдкрд▓реА рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕",
        'weather_forecast': "#### ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯрдХ/рд░реЛрдЧ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'details': "рддрдкрд╢реАрд▓:",
        'crop_rotation_planner': "ЁЯМ▒ рдкрд┐рдХ рдлреЗрд░рдкрд╛рд▓рдЯ рдирд┐рдпреЛрдЬрдХ",
        'fertilizer_optimization': "ЁЯзк рдЦрдд рдСрдкреНрдЯрд┐рдорд╛рдпрдЭреЗрд╢рди рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдорд╛рдЧреАрд▓ рд╢рд┐рдлрд╛рд░рд╕реА",
        'voice_assistant': "ЁЯОд рд╡реНрд╣реЙрдЗрд╕ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ",
        'built_with': "рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреАрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рддрдпрд╛рд░ рдХреЗрд▓реЗ",
        'last_updated': "рд╢реЗрд╡рдЯрдЪреЗ рдЕрджреНрдпрддрди: "
    },
    'Konkani': {
        'title': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧ рд░реЗрдХрдореЗрдВрдбреЗрд╢рди рд╕рд┐рд╕реНрдЯрд┐рдо",
        'farm_details': "ЁЯУП рд╢реЗрддреАрдЪреЗ рддрдкрд╢реАрд▓",
        'crop_preference': "ЁЯМ▒ рдкрд┐рдХрд╛рдЪреА рдкреНрд░рд╛рдзрд╛рдиреНрдп",
        'soil_analysis': "ЁЯЧ║я╕П рдорд╛рддреАрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        'upload_photo': "ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        'manual_selection': "ЁЯУЭ рдореЕрдиреНрдпреБрдЕрд▓ рдирд┐рд╡рдб",
        'select_soil_type': "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛",
        'generate_recommendation': "ЁЯТб рд╕реНрдорд╛рд░реНрдЯ рд╢рд┐рдлрд╛рд░рд╕ рддрдпрд╛рд░ рдХрд░рд╛",
        'personalized_recommendation': "### ЁЯОп рддреБрдордЪреА рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╕",
        'weather_forecast': "#### ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'pest_prediction': "#### ЁЯРЫ рдХреАрдЯрдХ/рд░реЛрдЧрд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ (AI рдореЙрдбреЗрд▓)",
        'details': "рддрдкрд╢реАрд▓:",
        'crop_rotation_planner': "ЁЯМ▒ рдкрд┐рдХ рдлреЗрд░рдкрд╛рд▓рдЯ рдирд┐рдпреЛрдЬрдХ",
        'fertilizer_optimization': "ЁЯзк рдЦрдд рдСрдкреНрдЯрд┐рдорд╛рдпрдЭреЗрд╢рди рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        'previous_recommendations': "ЁЯУЬ рдорд╛рдЧреАрд▓ рд╢рд┐рдлрд╛рд░рд╕реА",
        'voice_assistant': "ЁЯОд рд╡реНрд╣реЙрдЗрд╕ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ",
        'built_with': "рд╕рд╕реНрдЯреЗрдиреЗрдмрд▓ рдлрд╛рд░реНрдорд┐рдВрдЧрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рддрдпрд╛рд░ рдХреЗрд▓реЗ",
        'last_updated': "рд╢реЗрд╡рдЯрдЪреЗ рдЕрджреНрдпрддрди: "
    },
    'Urdu': {
        'title': "┘╛╪з╪ж█М╪п╪з╪▒ ╪▓╪▒╪з╪╣╪к ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к ┌й╪з ┘Ж╪╕╪з┘Е",
        'farm_details': "ЁЯУП ╪▓╪▒╪╣█М ╪к┘Б╪╡█М┘Д╪з╪к",
        'crop_preference': "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ╪к╪▒╪м█М╪н",
        'soil_analysis': "ЁЯЧ║я╕П ┘Е┘╣█М ┌й╪з ╪к╪м╪▓█М█Б",
        'upload_photo': "ЁЯУ╕ ╪к╪╡┘И█М╪▒ ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║",
        'manual_selection': "ЁЯУЭ ╪п╪│╪к█М ╪з┘Ж╪к╪о╪з╪и",
        'select_soil_type': "┘Е┘╣█М ┌й█М ┘В╪│┘Е ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        'generate_recommendation': "ЁЯТб ╪з╪│┘Е╪з╪▒┘╣ ╪│┘Б╪з╪▒╪┤ ╪к█М╪з╪▒ ┌й╪▒█М┌║",
        'personalized_recommendation': "### ЁЯОп ╪в┘╛ ┌й█М ╪░╪з╪к█М ╪│┘Б╪з╪▒╪┤",
        'weather_forecast': "#### ЁЯМдя╕П ┘Е┘И╪│┘Е ┌й█М ┘╛█М╪┤ ┌п┘И╪ж█М (AI ┘Е╪з┌И┘Д)",
        'pest_prediction': "#### ЁЯРЫ ┌й█М┌С┘И┌║/╪и█М┘Е╪з╪▒█М ┌й█М ┘╛█М╪┤ ┌п┘И╪ж█М (AI ┘Е╪з┌И┘Д)",
        'details': "╪к┘Б╪╡█М┘Д╪з╪к:",
        'crop_rotation_planner': "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ┌п╪▒╪п╪┤ ┌й╪з ┘Е┘Ж╪╡┘И╪и█Б",
        'fertilizer_optimization': "ЁЯзк ┌й┌╛╪з╪п ┌й█М ╪з╪╡┘Д╪з╪н ┌й█М┘Д┌й┘И┘Д█М┘╣╪▒",
        'previous_recommendations': "ЁЯУЬ ┘╛┌Ж┌╛┘Д█М ╪│┘Б╪з╪▒╪┤╪з╪к",
        'voice_assistant': "ЁЯОд ┘И╪з╪ж╪│ ╪з╪│╪│┘╣┘Ж┘╣",
        'built_with': "┘╛╪з╪ж█М╪п╪з╪▒ ╪▓╪▒╪з╪╣╪к ┌й█Т ┘Д█М█Т ┘Е╪н╪и╪к ╪│█Т ╪к█М╪з╪▒ ┌й█М╪з ┌п█М╪з",
        'last_updated': "╪в╪о╪▒█М ╪и╪з╪▒ ╪з┘╛ ┌И█М┘╣ ┌й█М╪з ┌п█М╪з: "
    }
    # Add more languages here
}


# --- Language Selection ---
lang = st.sidebar.selectbox("ЁЯМР Select Language / р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", list(LANGUAGES.keys()), index=0)
T = LANGUAGES[lang]

# Set page config as the first Streamlit command
st.set_page_config(page_title=T['title'], page_icon="ЁЯМ╛")

# Add the 'agents' directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'agents')))


# Import the run_agent_collaboration function from agent_setup
from agents.agent_setup import run_agent_collaboration

# Import WeatherAnalyst and PestDiseasePredictor
from models.weather_Analyst import WeatherAnalyst
from models.pest_disease_predictor import PestDiseasePredictor

# --- Soil Analysis Function ---
def analyze_soil_from_photo(uploaded_file):
    try:
        image = Image.open(uploaded_file).convert("RGB")
        image_array = np.array(image)
        avg_color = np.mean(image_array, axis=(0, 1))
        r, g, b = avg_color

        # Define typical RGB ranges for soil types
        if r > 120 and g < 110 and b < 110 and r > g and r > b:
            return "Clay"
        elif r > 90 and g > 90 and b < 80 and abs(r - g) < 30:
            return "Sandy"
        elif r < 120 and g < 120 and b < 120 and abs(r - g) < 20 and abs(g - b) < 20:
            return "Loamy"

        # Fallback with Euclidean distance
        clay_rgb = (150, 80, 80)
        sandy_rgb = (140, 120, 60)
        loamy_rgb = (80, 70, 60)
        def rgb_distance(rgb1, rgb2):
            return np.sqrt(sum((a - b) ** 2 for a, b in zip(rgb1, rgb2)))
        distances = {
            "Clay": rgb_distance((r, g, b), clay_rgb),
            "Sandy": rgb_distance((r, g, b), sandy_rgb),
            "Loamy": rgb_distance((r, g, b), loamy_rgb)
        }
        return min(distances, key=distances.get)
    except Exception as e:
        st.error(f"Error processing image: {str(e)}")
        return None



# --- Recommendation Parsing ---
def parse_recommendation(recommendation_text):
    crops_data = []
    crop_entries = recommendation_text.split("Plant ")[1:]
    for entry in crop_entries:
        crop_match = re.match(r"(\w+):", entry)
        if not crop_match:
            continue
        crop = crop_match.group(1)
        scores = {
            "Market Score": float(re.search(r"market score: ([\d.]+)", entry).group(1)),
            "Weather Suitability": float(re.search(r"weather suitability: ([\d.]+)", entry).group(1)),
            "Sustainability": float(re.search(r"sustainability: ([\d.]+)", entry).group(1)),
            "Carbon Footprint": float(re.search(r"carbon footprint: ([\d.]+)", entry).group(1)),
            "Water": float(re.search(r"water: ([\d.]+)", entry).group(1)),
            "Erosion": float(re.search(r"erosion: ([\d.]+)", entry).group(1)),
            "Final Score": float(re.search(r"Final Score: ([\d.]+)", entry).group(1))
        }
        price_match = re.search(r"\(\$([\d.]+)/ton\)", entry)
        market_price = float(price_match.group(1)) if price_match else 0.0
        crops_data.append({"crop": crop, "scores": scores, "market_price": market_price})
    return crops_data

# --- Custom CSS ---
st.markdown("""
    <style>
    :root {
        --primary-color: #2E7D32;
        --secondary-color: #1565C0;
        --accent-color: #FF6D00;
        --background-color: #F5F7F9;
    }
    .main { background-color: var(--background-color); padding: 2rem; }
    .stButton>button { width: 100%; margin-top: 1rem; margin-bottom: 2rem; background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%); color: white; border: none; border-radius: 10px; padding: 0.75rem; font-weight: 600; transition: transform 0.2s ease; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
    .stButton>button:hover { transform: translateY(-2px); box-shadow: 0 6px 8px rgba(0,0,0,0.15); }
    .recommendation-box { background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%); border-left: 6px solid #4CAF50; padding: 25px; border-radius: 15px; margin: 20px 0; box-shadow: 0 8px 16px rgba(0,0,0,0.1); transition: transform 0.3s ease; }
    .recommendation-box:hover { transform: translateY(-5px); }
    .score-header { text-align: center; color: #2C3E50; margin-bottom: 2rem; font-weight: 600; text-shadow: 1px 1px 2px rgba(0,0,0,0.1); }
    .stRadio>label, .stSelectbox { background: white; padding: 10px 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); margin: 5px; }
    .stFileUploader { background: white; padding: 20px; border-radius: 10px; border: 2px dashed #4CAF50; }
    .stSuccess { background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); padding: 20px; border-radius: 10px; color: white; }
    .stWarning { background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%); padding: 20px; border-radius: 10px; color: white; }
    .dataframe { border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
    hr { border: none; height: 3px; background: linear-gradient(90deg, #4CAF50 0%, #1565C0 100%); margin: 2rem 0; }
    </style>
""", unsafe_allow_html=True)

# --- Main Content ---
st.markdown(f"""
<div class='recommendation-box' style='background: linear-gradient(135deg, #1565C0 0%, #0D47A1 100%); color: white;'>
    <h2 style='color: white; font-size: 2.5em; margin-bottom: 20px;'>ЁЯМ╛ {T['title']}</h2>
    <p style='font-size: 1.2em; margin-bottom: 15px;'>Get AI-powered recommendations based on:</p>
    <div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;'>
        <div style='background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;'>ЁЯУК Market Analysis</div>
        <div style='background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;'>ЁЯМдя╕П Weather Patterns</div>
        <div style='background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;'>ЁЯМ▒ Sustainability Metrics</div>
        <div style='background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;'>ЁЯМН Environmental Impact</div>
    </div>
</div>
""", unsafe_allow_html=True)

col1, col2 = st.columns(2, gap="large")

with col1:
    st.markdown(f"<div style='background: white; padding: 20px; border-radius: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'><h3 style='color: #2E7D32;'>{T['farm_details']}</h3></div>", unsafe_allow_html=True)
    land_size = st.select_slider("Farm size (hectares)", options=[1, 2, 5, 8, 10, 15, 20], value=8, help="Slide to select your farm size")

with col2:
    st.markdown(f"<div style='background: white; padding: 20px; border-radius: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'><h3 style='color: #2E7D32;'>{T['crop_preference']}</h3></div>", unsafe_allow_html=True)
    crop_preference = st.selectbox("What would you like to grow?", options=["Grains", "Vegetables", "Fruits"], help="Choose your preferred crop type")


# --- Soil Type Input with Both Options ---
st.markdown(f"### {T['soil_analysis']}")
soil_type = None
soil_option = st.radio(f"How would you like to determine your soil type?", [T['upload_photo'], T['manual_selection']], horizontal=True)

if soil_option == T['upload_photo']:
    soil_photo = st.file_uploader(T['upload_photo'], type=["jpg", "jpeg", "png"], key="soil_photo_uploader")
    if soil_photo:
        soil_type = analyze_soil_from_photo(soil_photo)
        if soil_type:
            st.success(f"тЬЕ Detected soil type: {soil_type}")
        else:
            st.warning("тЪая╕П Could not determine soil type from photo. Please select manually.")
            soil_type = st.selectbox(T['select_soil_type'], options=["Loamy", "Sandy", "Clay"], key="manual_soil_select")
    else:
        soil_type = st.selectbox(T['select_soil_type'], options=["Loamy", "Sandy", "Clay"], key="manual_soil_select_fallback")
elif soil_option == T['manual_selection']:
    soil_type = st.selectbox(T['select_soil_type'], options=["Loamy", "Sandy", "Clay"], key="manual_soil_select")

# Initialize database if it doesn't exist
db_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'database', 'sustainable_farming.db'))
if not os.path.exists(db_path):
    initialize_db()


# --- Recommendation Generation ---
st.markdown("<br>", unsafe_allow_html=True)

if st.button(T['generate_recommendation'], type="primary"):
    with st.spinner("ЁЯФД Analyzing your farm conditions..."):
        try:
            result = run_agent_collaboration(land_size=land_size, soil_type=soil_type, crop_preference=crop_preference)
            crops_data = parse_recommendation(result['recommendation'])

            # --- Weather Forecasting (using WeatherAnalyst) ---
            weather_analyst = WeatherAnalyst()
            # Example: use default or dummy values for demonstration; replace with real user input if available
            soil_ph = 6.5
            soil_moisture = 25
            fertilizer = 50
            pesticide = 5
            weather_forecast = weather_analyst.forecast(soil_ph, soil_moisture, fertilizer, pesticide)
            st.markdown(T['weather_forecast'])
            st.info(f"Predicted Temperature: {weather_forecast['temperature'][0]:.1f}┬░C, Predicted Rainfall: {weather_forecast['rainfall'][0]:.1f} mm")

            # --- Pest/Disease Prediction (using PestDiseasePredictor) ---
            pest_predictor = PestDiseasePredictor()
            pest_prediction = pest_predictor.predict(
                crop_type=crop_preference,
                soil_ph=soil_ph,
                soil_moisture=soil_moisture,
                temperature=weather_forecast['temperature'][0],
                rainfall=weather_forecast['rainfall'][0]
            )
            st.markdown(T['pest_prediction'])
            st.info(pest_prediction)

            st.markdown(T['personalized_recommendation'])

            details = result['recommendation'].split("Details:")[1].strip()
            details_html = details.replace('\n', '<br>')
            st.markdown(f"<div class='recommendation-box'><strong>{T['details']}</strong><br>{details_html}</div>", unsafe_allow_html=True)

            # --- Weather Forecasting Display (from agent, if present) ---
            if 'Weather Forecast' in result and result['Weather Forecast']:
                st.markdown("#### ЁЯМдя╕П Weather Forecast (Agent)")
                st.info(result['Weather Forecast'])

            # --- Pest/Disease Prediction Display (from agent, if present) ---
            if 'Pest/Disease Prediction' in result and result['Pest/Disease Prediction']:
                st.markdown("#### ЁЯРЫ Pest/Disease Prediction (Agent)")
                st.info(result['Pest/Disease Prediction'])

            # --- Weather Alerts ---
            if 'Warnings' in result and result['Warnings']:
                for warn in result['Warnings']:
                    st.warning(f"Weather Alert: {warn}")

            # --- Pest/Disease Advice ---
            if 'Pest/Disease Advice' in result and result['Pest/Disease Advice']:
                st.info(f"Pest/Disease Advice: {result['Pest/Disease Advice']}")

            for crop_data in crops_data:
                crop = crop_data['crop']
                scores = crop_data['scores']
                market_price = crop_data['market_price']
                labels = list(scores.keys())
                values = [score * 100 for score in scores.values()]
                fig = go.Figure(data=[go.Bar(y=labels, x=values, orientation='h', marker=dict(color=[
                    "#4caf50", "#2196f3", "#ff9800", "#607d8b", "#00bcd4", "#795548", "#e91e63"
                ]), text=[f"{val:.1f}%" for val in values], textposition='auto')])
                fig.update_layout(title=f"{crop.capitalize()} Scores (Market Price: ${market_price:.2f}/ton)", title_x=0.5, xaxis_title="Score (%)", yaxis_title="Category", xaxis=dict(range=[0, 100]), margin=dict(l=0, r=0, t=40, b=0), height=400)
                st.plotly_chart(fig, use_container_width=True)

            st.markdown("<h3 class='score-header'>ЁЯУК Detailed Score Analysis</h3>", unsafe_allow_html=True)
            for chart in result['chart_data']:
                crop = chart['crop']
                labels = chart['labels']
                values = chart['values']
                fig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', hoverinfo='label+value', marker=dict(colors=[
                    "#4caf50", "#2196f3", "#ff9800", "#607d8b", "#00bcd4", "#795548", "#e91e63"
                ]))])
                fig.update_layout(title=f"{crop.capitalize()} Score Distribution", title_x=0.5, margin=dict(l=0, r=0, t=40, b=0), legend=dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5))
                st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            st.error(f"тЪая╕П An error occurred: {str(e)}")
# ... (existing imports at the top of app.py)

from crop_rotation_planner import CropRotationPlanner

# ... (existing code up to the recommendation generation)

st.markdown("<hr>", unsafe_allow_html=True)
st.header(T['crop_rotation_planner'])
planner = CropRotationPlanner(db_path=os.path.abspath(os.path.join(os.path.dirname(__file__), 'database', 'sustainable_farming.db')))
try:
    with sqlite3.connect(os.path.abspath(os.path.join(os.path.dirname(__file__), 'database', 'sustainable_farming.db'))) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT crop FROM recommendations ORDER BY timestamp DESC LIMIT 1")
        latest_crop = cursor.fetchone()
    if latest_crop:
        latest_crop = latest_crop[0]
        plan = planner.generate_plan(latest_crop)
        st.success(f"Last planted crop: {latest_crop}. Suggested rotation plan:")
        st.plotly_chart(planner.create_timeline(plan), use_container_width=True)
    else:
        st.info("No crop history found. Generate a recommendation to start building your rotation plan!")
except Exception as e:
    st.warning(f"Could not load crop rotation plan: {str(e)}")

# ... (existing imports at the top of app.py)

from fertilizer_optimizer import FertilizerOptimizer

# ... (existing code up to the crop rotation planner)

st.markdown("<hr>", unsafe_allow_html=True)
st.header(T['fertilizer_optimization'])
with st.form("fertilizer_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        fert_soil = st.selectbox("Soil Type", ["Loamy", "Sandy", "Clay"], key="fert_soil")
    with col2:
        fert_crop = st.selectbox("Crop Type", ["Wheat", "Corn", "Rice", "Soybeans", "Tomatoes", "Carrots"], key="fert_crop")
    with col3:
        fert_land = st.number_input("Land Size (hectares)", min_value=1, max_value=100, value=8, key="fert_land")
    submitted = st.form_submit_button("Calculate Optimal Fertilizer")
if submitted and 'fert_soil' in st.session_state and 'fert_crop' in st.session_state and 'fert_land' in st.session_state:
    optimizer = FertilizerOptimizer(db_path=os.path.abspath(os.path.join(os.path.dirname(__file__), 'database', 'sustainable_farming.db')))
    result = optimizer.calculate_fertilizer(st.session_state['fert_land'], st.session_state['fert_soil'], st.session_state['fert_crop'])
    st.success(f"For {st.session_state['fert_land']} hectares of {st.session_state['fert_soil'].lower()} soil planting {st.session_state['fert_crop'].lower()}, use:")
    st.write(f"- Nitrogen: {result['nitrogen_kg']} kg")
    st.write(f"- Phosphorus: {result['phosphorus_kg']} kg")
    st.write(f"- Potassium: {result['potassium_kg']} kg")
    st.caption("*This recommendation factors in sustainability by reducing excess fertilizer to lower carbon footprint.")


st.markdown(f"<h3 class='score-header'>{T['previous_recommendations']}</h3>", unsafe_allow_html=True)
st.subheader(T['previous_recommendations'], divider="green")
try:
    with sqlite3.connect(db_path) as conn:
        past_recommendations = pd.read_sql("SELECT * FROM recommendations ORDER BY timestamp DESC LIMIT 5", conn)
    if not past_recommendations.empty:
        st.dataframe(
            past_recommendations[['crop', 'score', 'rationale', 'carbon_score', 'water_score', 'erosion_score', 'timestamp']],
            use_container_width=True,
            column_config={
                "crop": "Crop",
                "score": "Final Score",
                "rationale": "Rationale",
                "carbon_score": "Carbon Footprint Score",
                "water_score": "Water Score",
                "erosion_score": "Erosion Score",
                "timestamp": "Timestamp"
            },
            hide_index=True
        )
    else:
        st.info("No past recommendations found.")
except Exception as e:
    st.warning(f"Could not load past recommendations: {str(e)}")



# --- Footer ---
current_time = datetime.now().strftime("%B %d, %Y at %I:%M %p IST")
st.markdown(f"""
---
<div style='text-align: center; color: #666;'>
    <p>{T['built_with']}</p>
    <p><small>{T['last_updated']} {current_time}</small></p>
</div>

""", unsafe_allow_html=True)
